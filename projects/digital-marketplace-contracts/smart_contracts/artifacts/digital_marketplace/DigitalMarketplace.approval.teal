#pragma version 10
#pragma typetrack false

// smart_contracts.digital_marketplace.contract.DigitalMarketplace.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock "deposited"
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x3625e4eb // method "deposit(pay)void"
    txna ApplicationArgs 0
    match main_deposit_route@5

main_after_if_else@8:
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(ARC4Contract):
    intc_1 // 0
    return

main_deposit_route@5:
    // smart_contracts/digital_marketplace/contract.py:9
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/digital_marketplace/contract.py:9
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub deposit
    intc_0 // 1
    return

main_bare_routing@6:
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@8
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit(payment: uint64) -> void:
deposit:
    // smart_contracts/digital_marketplace/contract.py:9-10
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def deposit(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:11
    // assert payment.sender == Txn.sender
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:12
    // assert payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:15
    // self.deposited.get(Txn.sender, UInt64(0)) + payment.amount
    txn Sender
    intc_1 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    intc_1 // 0
    cover 2
    select
    frame_dig -1
    gtxns Amount
    // smart_contracts/digital_marketplace/contract.py:14
    // self.deposited[Txn.sender] = (
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:15
    // self.deposited.get(Txn.sender, UInt64(0)) + payment.amount
    cover 2
    +
    // smart_contracts/digital_marketplace/contract.py:14
    // self.deposited[Txn.sender] = (
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:14-16
    // self.deposited[Txn.sender] = (
    //     self.deposited.get(Txn.sender, UInt64(0)) + payment.amount
    // )
    swap
    app_local_put
    retsub

#pragma version 10
#pragma typetrack false

// smart_contracts.digital_marketplace.contract.DigitalMarketplace.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 48 8 13135300
    bytecblock "deposited" "receipt_book" "sales" "" 0x0000
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@15
    pushbytess 0x3625e4eb 0x21f1ddff 0x13000a94 0xa6920066 0x09544810 0xd49ac60e 0xa18f1ffc 0x456e3975 0x1eabbb58 0xf8e0efaf // method "deposit(pay)void", method "withdraw(uint64)void", method "sponsor_asset(asset)void", method "open_sale(axfer,uint64)void", method "close_sale(asset)void", method "buy((address,uint64))void", method "bid((address,uint64),uint64)void", method "claim_unencumbered_bids()void", method "get_total_and_unencumbered_bids()(uint64,uint64)", method "accept_bid(uint64)void"
    txna ApplicationArgs 0
    match main_deposit_route@5 main_withdraw_route@6 main_sponsor_asset_route@7 main_open_sale_route@8 main_close_sale_route@9 main_buy_route@10 main_bid_route@11 main_claim_unencumbered_bids_route@12 main_get_total_and_unencumbered_bids_route@13 main_accept_bid_route@14

main_after_if_else@17:
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    intc_0 // 0
    return

main_accept_bid_route@14:
    // smart_contracts/digital_marketplace/contract.py:224
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:224
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub accept_bid
    intc_1 // 1
    return

main_get_total_and_unencumbered_bids_route@13:
    // smart_contracts/digital_marketplace/contract.py:210
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_and_unencumbered_bids
    swap
    itob
    swap
    itob
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_claim_unencumbered_bids_route@12:
    // smart_contracts/digital_marketplace/contract.py:192
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub claim_unencumbered_bids
    intc_1 // 1
    return

main_bid_route@11:
    // smart_contracts/digital_marketplace/contract.py:158
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/digital_marketplace/contract.py:158
    // @abimethod
    callsub bid
    intc_1 // 1
    return

main_buy_route@10:
    // smart_contracts/digital_marketplace/contract.py:141
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:141
    // @abimethod
    callsub buy
    intc_1 // 1
    return

main_close_sale_route@9:
    // smart_contracts/digital_marketplace/contract.py:125
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:125
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub close_sale
    intc_1 // 1
    return

main_open_sale_route@8:
    // smart_contracts/digital_marketplace/contract.py:103
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:103
    // @abimethod
    callsub open_sale
    intc_1 // 1
    return

main_sponsor_asset_route@7:
    // smart_contracts/digital_marketplace/contract.py:88
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:88
    // @abimethod
    callsub sponsor_asset
    intc_1 // 1
    return

main_withdraw_route@6:
    // smart_contracts/digital_marketplace/contract.py:77
    // @abimethod(allow_actions=["NoOp", "CloseOut"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 5 // 5
    &
    assert // OnCompletion is not one of NoOp, CloseOut
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:77
    // @abimethod(allow_actions=["NoOp", "CloseOut"])
    callsub withdraw
    intc_1 // 1
    return

main_deposit_route@5:
    // smart_contracts/digital_marketplace/contract.py:66
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/digital_marketplace/contract.py:66
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    callsub deposit
    intc_1 // 1
    return

main_bare_routing@15:
    // smart_contracts/digital_marketplace/contract.py:59
    // class DigitalMarketplace(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.digital_marketplace.subroutines.sales_box_mbr(prefix_length: uint64) -> uint64:
sales_box_mbr:
    // smart_contracts/digital_marketplace/subroutines.py:6-7
    // @subroutine
    // def sales_box_mbr(prefix_length: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/digital_marketplace/subroutines.py:10-13
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    frame_dig -1
    // smart_contracts/digital_marketplace/subroutines.py:12-13
    // # SaleKey
    // 32 + 8 +
    pushint 32 // 32
    // smart_contracts/digital_marketplace/subroutines.py:10-13
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    +
    // smart_contracts/digital_marketplace/subroutines.py:12-13
    // # SaleKey
    // 32 + 8 +
    intc_3 // 8
    // smart_contracts/digital_marketplace/subroutines.py:10-13
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    +
    // smart_contracts/digital_marketplace/subroutines.py:14-16
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    intc_3 // 8
    // smart_contracts/digital_marketplace/subroutines.py:10-16
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    +
    // smart_contracts/digital_marketplace/subroutines.py:14-16
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    intc_3 // 8
    // smart_contracts/digital_marketplace/subroutines.py:10-16
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    +
    // smart_contracts/digital_marketplace/subroutines.py:17-18
    // # bid field
    // 32 + 8
    pushint 32 // 32
    // smart_contracts/digital_marketplace/subroutines.py:10-18
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    // # bid field
    // 32 + 8
    +
    // smart_contracts/digital_marketplace/subroutines.py:17-18
    // # bid field
    // 32 + 8
    intc_3 // 8
    // smart_contracts/digital_marketplace/subroutines.py:10-18
    // # Domain separator
    // prefix_length +
    // # SaleKey
    // 32 + 8 +
    // # Sale
    // # amount & cost fields
    // 8 + 8 +
    // # bid field
    // 32 + 8
    +
    // smart_contracts/digital_marketplace/subroutines.py:8-9
    // # fmt: off
    // return 2_500 + 400 * (
    pushint 400 // 400
    // smart_contracts/digital_marketplace/subroutines.py:8-19
    // # fmt: off
    // return 2_500 + 400 * (
    //     # Domain separator
    //     prefix_length +
    //     # SaleKey
    //     32 + 8 +
    //     # Sale
    //     # amount & cost fields
    //     8 + 8 +
    //     # bid field
    //     32 + 8
    // )
    *
    // smart_contracts/digital_marketplace/subroutines.py:8-9
    // # fmt: off
    // return 2_500 + 400 * (
    pushint 2500 // 2500
    // smart_contracts/digital_marketplace/subroutines.py:8-19
    // # fmt: off
    // return 2_500 + 400 * (
    //     # Domain separator
    //     prefix_length +
    //     # SaleKey
    //     32 + 8 +
    //     # Sale
    //     # amount & cost fields
    //     8 + 8 +
    //     # bid field
    //     32 + 8
    // )
    +
    retsub


// smart_contracts.digital_marketplace.subroutines.find_bid_receipt(receipts: bytes, key: bytes) -> uint64, uint64:
find_bid_receipt:
    // smart_contracts/digital_marketplace/subroutines.py:36-39
    // @subroutine
    // def find_bid_receipt(
    //     receipts: ImmutableArray[BidReceipt], key: SaleKey
    // ) -> tuple[bool, UInt64]:
    proto 2 2
    // smart_contracts/digital_marketplace/subroutines.py:40
    // for i in urange(receipts.length):
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_0 // 0

find_bid_receipt_for_header@1:
    // smart_contracts/digital_marketplace/subroutines.py:40
    // for i in urange(receipts.length):
    frame_dig 1
    frame_dig 0
    <
    bz find_bid_receipt_after_for@6
    // smart_contracts/digital_marketplace/subroutines.py:41
    // if receipts[i].sale_key == key:
    frame_dig -2
    extract 2 0
    frame_dig 1
    intc_2 // 48
    *
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    extract 0 40 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz find_bid_receipt_after_if_else@4
    // smart_contracts/digital_marketplace/subroutines.py:42
    // return True, i
    intc_1 // 1
    frame_dig 1
    uncover 3
    uncover 3
    retsub

find_bid_receipt_after_if_else@4:
    // smart_contracts/digital_marketplace/subroutines.py:40
    // for i in urange(receipts.length):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b find_bid_receipt_for_header@1

find_bid_receipt_after_for@6:
    // smart_contracts/digital_marketplace/subroutines.py:43
    // return False, UInt64(0)
    intc_0 // 0
    dup
    uncover 3
    uncover 3
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit(payment: uint64) -> void:
deposit:
    // smart_contracts/digital_marketplace/contract.py:66-67
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def deposit(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:68
    // assert payment.sender == Txn.sender, err.DIFFERENT_SENDER
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Different sender
    // smart_contracts/digital_marketplace/contract.py:70
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/digital_marketplace/contract.py:69-71
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong receiver
    // smart_contracts/digital_marketplace/contract.py:74
    // self.deposited.get(Txn.sender, default=UInt64(0)) + payment.amount
    txn Sender
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    frame_dig -1
    gtxns Amount
    // smart_contracts/digital_marketplace/contract.py:73
    // self.deposited[Txn.sender] = (
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:74
    // self.deposited.get(Txn.sender, default=UInt64(0)) + payment.amount
    cover 2
    +
    // smart_contracts/digital_marketplace/contract.py:73
    // self.deposited[Txn.sender] = (
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:73-75
    // self.deposited[Txn.sender] = (
    //     self.deposited.get(Txn.sender, default=UInt64(0)) + payment.amount
    // )
    swap
    app_local_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw(amount: bytes) -> void:
withdraw:
    // smart_contracts/digital_marketplace/contract.py:77-78
    // @abimethod(allow_actions=["NoOp", "CloseOut"])
    // def withdraw(self, amount: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:79
    // if Txn.on_completion == OnCompleteAction.NoOp:
    txn OnCompletion
    bnz withdraw_else_body@3
    // smart_contracts/digital_marketplace/contract.py:80
    // self.deposited[Txn.sender] -= amount.native
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    frame_dig -1
    btoi
    swap
    dig 1
    -
    uncover 2
    bytec_0 // "deposited"
    uncover 2
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:82
    // itxn.Payment(receiver=Txn.sender, amount=amount.native).submit()
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub

withdraw_else_body@3:
    // smart_contracts/digital_marketplace/contract.py:84-86
    // itxn.Payment(
    //     receiver=Txn.sender, amount=self.deposited[Txn.sender]
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:85
    // receiver=Txn.sender, amount=self.deposited[Txn.sender]
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/digital_marketplace/contract.py:84
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:84-86
    // itxn.Payment(
    //     receiver=Txn.sender, amount=self.deposited[Txn.sender]
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset(asset: uint64) -> void:
sponsor_asset:
    // smart_contracts/digital_marketplace/contract.py:88-89
    // @abimethod
    // def sponsor_asset(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:90
    // assert not Global.current_application_address.is_opted_in(
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:90-92
    // assert not Global.current_application_address.is_opted_in(
    //     asset
    // ), err.ALREADY_OPTED_IN
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    !
    assert // Already opted in
    // smart_contracts/digital_marketplace/contract.py:93
    // assert asset.clawback == Global.zero_address, err.CLAWBACK_ASA
    frame_dig -1
    asset_params_get AssetClawback
    assert // asset exists
    global ZeroAddress
    ==
    assert // Clawback ASA
    // smart_contracts/digital_marketplace/contract.py:95
    // self.deposited[Txn.sender] -= Global.asset_opt_in_min_balance
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    global AssetOptInMinBalance
    -
    bytec_0 // "deposited"
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:97-101
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:99
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:100
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:97
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:97-101
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale(asset_deposit: uint64, cost: bytes) -> void:
open_sale:
    // smart_contracts/digital_marketplace/contract.py:103-106
    // @abimethod
    // def open_sale(
    //     self, asset_deposit: gtxn.AssetTransferTransaction, cost: arc4.UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:107
    // assert asset_deposit.sender == Txn.sender, err.DIFFERENT_SENDER
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert // Different sender
    // smart_contracts/digital_marketplace/contract.py:109
    // asset_deposit.asset_receiver == Global.current_application_address
    frame_dig -2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/digital_marketplace/contract.py:108-110
    // assert (
    //     asset_deposit.asset_receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong receiver
    // smart_contracts/digital_marketplace/contract.py:113
    // arc4.Address(Txn.sender), arc4.UInt64(asset_deposit.xfer_asset.id)
    txn Sender
    frame_dig -2
    gtxns XferAsset
    itob
    // smart_contracts/digital_marketplace/contract.py:112-114
    // sale_key = SaleKey(
    //     arc4.Address(Txn.sender), arc4.UInt64(asset_deposit.xfer_asset.id)
    // )
    concat
    // smart_contracts/digital_marketplace/contract.py:115
    // assert sale_key not in self.sales, err.SALE_ALREADY_EXISTS
    bytec_2 // "sales"
    swap
    concat
    dup
    box_len
    bury 1
    !
    assert // Sale already exists
    // smart_contracts/digital_marketplace/contract.py:117
    // self.deposited[Txn.sender] -= sales_box_mbr(self.sales.key_prefix.length)
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    pushint 5 // 5
    callsub sales_box_mbr
    -
    bytec_0 // "deposited"
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:120
    // arc4.UInt64(asset_deposit.asset_amount),
    frame_dig -2
    gtxns AssetAmount
    itob
    // smart_contracts/digital_marketplace/contract.py:119-123
    // self.sales[sale_key] = Sale(
    //     arc4.UInt64(asset_deposit.asset_amount),
    //     cost,
    //     Bid(arc4.Address(), arc4.UInt64()),
    // )
    frame_dig -1
    concat
    // smart_contracts/digital_marketplace/contract.py:122
    // Bid(arc4.Address(), arc4.UInt64()),
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    // smart_contracts/digital_marketplace/contract.py:119-123
    // self.sales[sale_key] = Sale(
    //     arc4.UInt64(asset_deposit.asset_amount),
    //     cost,
    //     Bid(arc4.Address(), arc4.UInt64()),
    // )
    concat
    box_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale(asset: uint64) -> void:
close_sale:
    // smart_contracts/digital_marketplace/contract.py:125-126
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def close_sale(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:127
    // sale_key = SaleKey(arc4.Address(Txn.sender), arc4.UInt64(asset.id))
    txn Sender
    frame_dig -1
    itob
    concat
    // smart_contracts/digital_marketplace/contract.py:129-133
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=self.sales[sale_key].amount.native,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:131
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:132
    // asset_amount=self.sales[sale_key].amount.native,
    bytec_2 // "sales"
    uncover 2
    concat
    dup
    box_get
    assert // check self.sales entry exists
    intc_0 // 0
    extract_uint64
    itxn_field AssetAmount
    swap
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:129
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:129-133
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Txn.sender,
    //     asset_amount=self.sales[sale_key].amount.native,
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:136
    // Txn.sender, default=UInt64(0)
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:135-137
    // self.deposited[Txn.sender] = self.deposited.get(
    //     Txn.sender, default=UInt64(0)
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    intc_0 // 0
    // smart_contracts/digital_marketplace/contract.py:135
    // self.deposited[Txn.sender] = self.deposited.get(
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:135-137
    // self.deposited[Txn.sender] = self.deposited.get(
    //     Txn.sender, default=UInt64(0)
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    app_local_get_ex
    // smart_contracts/digital_marketplace/contract.py:136
    // Txn.sender, default=UInt64(0)
    intc_0 // 0
    // smart_contracts/digital_marketplace/contract.py:135-137
    // self.deposited[Txn.sender] = self.deposited.get(
    //     Txn.sender, default=UInt64(0)
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    cover 2
    select
    // smart_contracts/digital_marketplace/contract.py:137
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    pushint 5 // 5
    callsub sales_box_mbr
    // smart_contracts/digital_marketplace/contract.py:135
    // self.deposited[Txn.sender] = self.deposited.get(
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:135-137
    // self.deposited[Txn.sender] = self.deposited.get(
    //     Txn.sender, default=UInt64(0)
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    cover 2
    +
    // smart_contracts/digital_marketplace/contract.py:135
    // self.deposited[Txn.sender] = self.deposited.get(
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:135-137
    // self.deposited[Txn.sender] = self.deposited.get(
    //     Txn.sender, default=UInt64(0)
    // ) + sales_box_mbr(self.sales.key_prefix.length)
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:139
    // del self.sales[sale_key]
    box_del
    pop
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(sale_key: bytes) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:141-142
    // @abimethod
    // def buy(self, sale_key: SaleKey) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:143
    // assert Txn.sender != sale_key.owner.native, err.SELLER_CANT_BE_BUYER
    txn Sender
    frame_dig -1
    extract 0 32 // on error: Index access is out of bounds
    swap
    dig 1
    !=
    assert // Seller cannot be buyer
    // smart_contracts/digital_marketplace/contract.py:145
    // self.deposited[Txn.sender] -= self.sales[sale_key].cost.native
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    bytec_2 // "sales"
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.sales entry exists
    intc_3 // 8
    extract_uint64
    uncover 2
    swap
    -
    uncover 2
    bytec_0 // "deposited"
    uncover 2
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:146
    // self.deposited[sale_key.owner.native] += self.sales[
    dig 1
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    // smart_contracts/digital_marketplace/contract.py:146-148
    // self.deposited[sale_key.owner.native] += self.sales[
    //     sale_key
    // ].cost.native + sales_box_mbr(self.sales.key_prefix.length)
    dig 1
    box_get
    assert // check self.sales entry exists
    intc_3 // 8
    extract_uint64
    // smart_contracts/digital_marketplace/contract.py:148
    // ].cost.native + sales_box_mbr(self.sales.key_prefix.length)
    pushint 5 // 5
    callsub sales_box_mbr
    // smart_contracts/digital_marketplace/contract.py:146-148
    // self.deposited[sale_key.owner.native] += self.sales[
    //     sale_key
    // ].cost.native + sales_box_mbr(self.sales.key_prefix.length)
    +
    +
    uncover 2
    // smart_contracts/digital_marketplace/contract.py:146
    // self.deposited[sale_key.owner.native] += self.sales[
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:146-148
    // self.deposited[sale_key.owner.native] += self.sales[
    //     sale_key
    // ].cost.native + sales_box_mbr(self.sales.key_prefix.length)
    uncover 2
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:150-154
    // itxn.AssetTransfer(
    //     xfer_asset=sale_key.asset.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=self.sales[sale_key].amount.native,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:151
    // xfer_asset=sale_key.asset.native,
    frame_dig -1
    pushint 32 // 32
    extract_uint64
    // smart_contracts/digital_marketplace/contract.py:152
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:153
    // asset_amount=self.sales[sale_key].amount.native,
    dig 2
    box_get
    assert // check self.sales entry exists
    intc_0 // 0
    extract_uint64
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:150
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:150-154
    // itxn.AssetTransfer(
    //     xfer_asset=sale_key.asset.native,
    //     asset_receiver=Txn.sender,
    //     asset_amount=self.sales[sale_key].amount.native,
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:156
    // del self.sales[sale_key]
    box_del
    pop
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.bid(sale_key: bytes, new_bid_amount: bytes) -> void:
bid:
    // smart_contracts/digital_marketplace/contract.py:158-159
    // @abimethod
    // def bid(self, sale_key: SaleKey, new_bid_amount: arc4.UInt64) -> None:
    proto 2 0
    intc_0 // 0
    dup
    bytec_3 // ""
    // smart_contracts/digital_marketplace/contract.py:160
    // new_bid = Bid(bidder=arc4.Address(Txn.sender), amount=new_bid_amount)
    txn Sender
    frame_dig -1
    concat
    // smart_contracts/digital_marketplace/contract.py:162
    // assert Txn.sender != sale_key.owner, err.SELLER_CANT_BE_BIDDER
    frame_dig -2
    extract 0 32 // on error: Index access is out of bounds
    txn Sender
    !=
    assert // Seller cannot be bidder
    // smart_contracts/digital_marketplace/contract.py:164
    // sale = self.sales[sale_key]
    bytec_2 // "sales"
    frame_dig -2
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.sales entry exists
    // smart_contracts/digital_marketplace/contract.py:165
    // if sale.bid.bidder:
    extract 16 40 // on error: Index access is out of bounds
    dup
    extract 0 32 // on error: Index access is out of bounds
    global ZeroAddress
    !=
    bz bid_after_if_else@2
    // smart_contracts/digital_marketplace/contract.py:166
    // assert sale.bid.amount.native < new_bid_amount.native, err.WORSE_BID
    frame_dig 6
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    btoi
    <
    assert // Worse bid

bid_after_if_else@2:
    // smart_contracts/digital_marketplace/contract.py:168
    // self.sales[sale_key] = sale._replace(bid=new_bid)
    frame_dig 5
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    extract 8 8 // on error: Index access is out of bounds
    concat
    frame_dig 3
    concat
    frame_dig 4
    swap
    box_put
    // smart_contracts/digital_marketplace/contract.py:170
    // new_bid_receipt = BidReceipt(sale_key, new_bid_amount)
    frame_dig -2
    frame_dig -1
    concat
    frame_bury 0
    // smart_contracts/digital_marketplace/contract.py:171
    // receipt_book, exists = self.receipt_book.maybe(Txn.sender)
    bytec_1 // "receipt_book"
    txn Sender
    concat
    box_get
    swap
    frame_bury 1
    // smart_contracts/digital_marketplace/contract.py:172
    // if exists:
    bz bid_else_body@7
    // smart_contracts/digital_marketplace/contract.py:173
    // found, index = find_bid_receipt(receipt_book, sale_key)
    frame_dig 1
    frame_dig -2
    callsub find_bid_receipt
    frame_bury 2
    // smart_contracts/digital_marketplace/contract.py:174
    // if found:
    bz bid_else_body@5
    // smart_contracts/digital_marketplace/contract.py:175
    // self.deposited[Txn.sender] += receipt_book[index].amount.native
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    frame_dig 1
    dup
    cover 2
    extract 2 0
    frame_dig 2
    dup
    cover 4
    intc_2 // 48
    *
    swap
    dig 1
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    pushint 40 // 40
    extract_uint64
    uncover 2
    +
    uncover 4
    bytec_0 // "deposited"
    uncover 2
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:176-178
    // self.receipt_book[Txn.sender] = receipt_book.replace(
    //     index, new_bid_receipt
    // )
    dig 1
    intc_0 // 0
    extract_uint16
    uncover 3
    >
    assert // Index access is out of bounds
    pushint 2 // 2
    +
    frame_dig 0
    replace3
    // smart_contracts/digital_marketplace/contract.py:176
    // self.receipt_book[Txn.sender] = receipt_book.replace(
    bytec_1 // "receipt_book"
    txn Sender
    concat
    // smart_contracts/digital_marketplace/contract.py:176-178
    // self.receipt_book[Txn.sender] = receipt_book.replace(
    //     index, new_bid_receipt
    // )
    dup
    box_del
    pop
    swap
    box_put

bid_after_if_else@8:
    // smart_contracts/digital_marketplace/contract.py:185
    // self.deposited[Txn.sender] -= new_bid_amount.native
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    frame_dig -1
    btoi
    -
    bytec_0 // "deposited"
    swap
    app_local_put
    retsub

bid_else_body@5:
    // smart_contracts/digital_marketplace/contract.py:180
    // self.receipt_book[Txn.sender] = receipt_book.append(new_bid_receipt)
    frame_dig 1
    extract 2 0
    frame_dig 0
    concat
    dup
    len
    intc_2 // 48
    /
    itob
    extract 6 2
    swap
    concat
    bytec_1 // "receipt_book"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    b bid_after_if_else@8

bid_else_body@7:
    // smart_contracts/digital_marketplace/contract.py:182
    // self.deposited[Txn.sender] -= receipt_book_box_mbr()
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    // smart_contracts/digital_marketplace/subroutines.py:25-33
    // return UInt64(
    //     2_500
    //     + 400
    //     * (
    //         # assuming it's possible to fill an entire box
    //         64
    //         + 32768
    //     )
    // )
    intc 4 // 13135300
    // smart_contracts/digital_marketplace/contract.py:182
    // self.deposited[Txn.sender] -= receipt_book_box_mbr()
    -
    bytec_0 // "deposited"
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:183
    // self.receipt_book[Txn.sender] = ImmutableArray(new_bid_receipt)
    pushbytes 0x0001
    frame_dig 0
    concat
    bytec_1 // "receipt_book"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    b bid_after_if_else@8


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.is_encumbered(bid: bytes) -> uint64:
is_encumbered:
    // smart_contracts/digital_marketplace/contract.py:187-188
    // @subroutine
    // def is_encumbered(self, bid: BidReceipt) -> bool:
    proto 1 1
    intc_0 // 0
    // smart_contracts/digital_marketplace/contract.py:189
    // sale, exists = self.sales.maybe(bid.sale_key)
    frame_dig -1
    extract 0 40 // on error: Index access is out of bounds
    bytec_2 // "sales"
    swap
    concat
    box_get
    // smart_contracts/digital_marketplace/contract.py:190
    // return exists and bool(sale.bid.bidder) and sale.bid.bidder == Txn.sender
    bz is_encumbered_bool_false@4
    frame_dig 1
    extract 16 40 // on error: Index access is out of bounds
    extract 0 32 // on error: Index access is out of bounds
    dup
    frame_bury 0
    global ZeroAddress
    !=
    bz is_encumbered_bool_false@4
    frame_dig 0
    txn Sender
    ==
    bz is_encumbered_bool_false@4
    intc_1 // 1

is_encumbered_bool_merge@5:
    // smart_contracts/digital_marketplace/contract.py:190
    // return exists and bool(sale.bid.bidder) and sale.bid.bidder == Txn.sender
    frame_bury 0
    retsub

is_encumbered_bool_false@4:
    intc_0 // 0
    b is_encumbered_bool_merge@5


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.claim_unencumbered_bids() -> void:
claim_unencumbered_bids:
    // smart_contracts/digital_marketplace/contract.py:192-193
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def claim_unencumbered_bids(self) -> None:
    proto 0 0
    // smart_contracts/digital_marketplace/contract.py:194
    // self.deposited[Txn.sender] = self.deposited.get(Txn.sender, UInt64(0))
    txn Sender
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    txn Sender
    bytec_0 // "deposited"
    uncover 2
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:196
    // encumbered_receipts = ImmutableArray[BidReceipt]()
    bytec 4 // 0x0000
    // smart_contracts/digital_marketplace/contract.py:198
    // for receipt in self.receipt_book[Txn.sender]:
    bytec_1 // "receipt_book"
    txn Sender
    concat
    box_get
    swap
    dup
    uncover 2
    assert // check self.receipt_book entry exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

claim_unencumbered_bids_for_header@1:
    // smart_contracts/digital_marketplace/contract.py:198
    // for receipt in self.receipt_book[Txn.sender]:
    frame_dig 3
    frame_dig 2
    <
    bz claim_unencumbered_bids_after_for@7
    frame_dig 1
    extract 2 0
    frame_dig 3
    intc_2 // 48
    *
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    dup
    // smart_contracts/digital_marketplace/contract.py:199
    // if self.is_encumbered(receipt):
    callsub is_encumbered
    bz claim_unencumbered_bids_else_body@4
    // smart_contracts/digital_marketplace/contract.py:200
    // encumbered_receipts = encumbered_receipts.append(receipt)
    frame_dig 0
    extract 2 0
    swap
    concat
    dup
    len
    intc_2 // 48
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

claim_unencumbered_bids_after_if_else@5:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b claim_unencumbered_bids_for_header@1

claim_unencumbered_bids_else_body@4:
    // smart_contracts/digital_marketplace/contract.py:202
    // self.deposited[Txn.sender] += receipt.amount.native
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    uncover 2
    pushint 40 // 40
    extract_uint64
    +
    bytec_0 // "deposited"
    swap
    app_local_put
    b claim_unencumbered_bids_after_if_else@5

claim_unencumbered_bids_after_for@7:
    // smart_contracts/digital_marketplace/contract.py:204
    // if encumbered_receipts:
    frame_dig 0
    intc_0 // 0
    extract_uint16
    bz claim_unencumbered_bids_else_body@9
    // smart_contracts/digital_marketplace/contract.py:205
    // self.receipt_book[Txn.sender] = encumbered_receipts
    bytec_1 // "receipt_book"
    txn Sender
    concat
    dup
    box_del
    pop
    frame_dig 0
    box_put
    retsub

claim_unencumbered_bids_else_body@9:
    // smart_contracts/digital_marketplace/contract.py:207
    // self.deposited[Txn.sender] += receipt_book_box_mbr()
    txn Sender
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    // smart_contracts/digital_marketplace/subroutines.py:25-33
    // return UInt64(
    //     2_500
    //     + 400
    //     * (
    //         # assuming it's possible to fill an entire box
    //         64
    //         + 32768
    //     )
    // )
    intc 4 // 13135300
    // smart_contracts/digital_marketplace/contract.py:207
    // self.deposited[Txn.sender] += receipt_book_box_mbr()
    +
    bytec_0 // "deposited"
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:208
    // del self.receipt_book[Txn.sender]
    bytec_1 // "receipt_book"
    txn Sender
    concat
    box_del
    pop
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.get_total_and_unencumbered_bids() -> uint64, uint64:
get_total_and_unencumbered_bids:
    // smart_contracts/digital_marketplace/contract.py:210-211
    // @abimethod(readonly=True)
    // def get_total_and_unencumbered_bids(self) -> UnencumberedBidsReceipt:
    proto 0 2
    bytec_3 // ""
    dupn 2
    // smart_contracts/digital_marketplace/contract.py:212
    // total_bids = UInt64(0)
    intc_0 // 0
    // smart_contracts/digital_marketplace/contract.py:212-213
    // total_bids = UInt64(0)
    // unencumbered_bids = UInt64(0)
    dupn 3
    // smart_contracts/digital_marketplace/contract.py:215
    // receipt_book, exists = self.receipt_book.maybe(Txn.sender)
    bytec_1 // "receipt_book"
    txn Sender
    concat
    box_get
    swap
    cover 3
    swap
    cover 2
    // smart_contracts/digital_marketplace/contract.py:216
    // if exists:
    bz get_total_and_unencumbered_bids_after_if_else@8
    // smart_contracts/digital_marketplace/contract.py:217
    // for receipt in receipt_book:
    frame_dig 5
    intc_0 // 0
    extract_uint16
    frame_bury 0
    intc_0 // 0
    frame_bury 1

get_total_and_unencumbered_bids_for_header@2:
    // smart_contracts/digital_marketplace/contract.py:217
    // for receipt in receipt_book:
    frame_dig 1
    frame_dig 0
    <
    bz get_total_and_unencumbered_bids_after_for@7
    frame_dig 5
    extract 2 0
    frame_dig 1
    intc_2 // 48
    *
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    // smart_contracts/digital_marketplace/contract.py:218
    // total_bids += receipt.amount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    frame_bury 2
    frame_dig 3
    +
    frame_bury 3
    // smart_contracts/digital_marketplace/contract.py:219
    // if not self.is_encumbered(receipt):
    callsub is_encumbered
    frame_dig 4
    frame_bury 6
    bnz get_total_and_unencumbered_bids_after_if_else@5
    // smart_contracts/digital_marketplace/contract.py:220
    // unencumbered_bids += receipt.amount.native
    frame_dig 4
    frame_dig 2
    +
    frame_bury 6

get_total_and_unencumbered_bids_after_if_else@5:
    frame_dig 6
    frame_bury 4
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b get_total_and_unencumbered_bids_for_header@2

get_total_and_unencumbered_bids_after_for@7:
    frame_dig 4
    frame_bury 6
    frame_dig 3
    frame_bury 7

get_total_and_unencumbered_bids_after_if_else@8:
    frame_dig 7
    frame_dig 6
    // smart_contracts/digital_marketplace/contract.py:222
    // return UnencumberedBidsReceipt(total_bids, unencumbered_bids)
    frame_bury 1
    frame_bury 0
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.accept_bid(asset: bytes) -> void:
accept_bid:
    // smart_contracts/digital_marketplace/contract.py:224-225
    // @abimethod(allow_actions=["NoOp", "OptIn"])
    // def accept_bid(self, asset: arc4.UInt64) -> None:
    proto 1 0
    intc_0 // 0
    dup
    // smart_contracts/digital_marketplace/contract.py:226
    // sale_key = SaleKey(owner=arc4.Address(Txn.sender), asset=asset)
    txn Sender
    frame_dig -1
    concat
    // smart_contracts/digital_marketplace/contract.py:227
    // sale = self.sales[sale_key]
    bytec_2 // "sales"
    dig 1
    concat
    dup
    cover 2
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // check self.sales entry exists
    // smart_contracts/digital_marketplace/contract.py:228
    // current_best_bid = sale.bid
    extract 16 40 // on error: Index access is out of bounds
    dup
    cover 2
    // smart_contracts/digital_marketplace/contract.py:229
    // current_best_bidder = current_best_bid.bidder.native
    extract 0 32 // on error: Index access is out of bounds
    dup
    cover 2
    // smart_contracts/digital_marketplace/contract.py:231
    // receipt_book = self.receipt_book[current_best_bidder]
    bytec_1 // "receipt_book"
    swap
    concat
    dup
    cover 2
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // check self.receipt_book entry exists
    // smart_contracts/digital_marketplace/contract.py:232
    // found, index = find_bid_receipt(receipt_book, sale_key)
    dup
    uncover 2
    callsub find_bid_receipt
    cover 2
    // smart_contracts/digital_marketplace/contract.py:233
    // assert found
    assert
    // smart_contracts/digital_marketplace/contract.py:235
    // encumbered_receipts = ImmutableArray[BidReceipt]()
    bytec 4 // 0x0000
    swap
    // smart_contracts/digital_marketplace/contract.py:236
    // for receipt in receipt_book:
    intc_0 // 0
    extract_uint16
    intc_0 // 0

accept_bid_for_header@1:
    // smart_contracts/digital_marketplace/contract.py:236
    // for receipt in receipt_book:
    frame_dig 11
    frame_dig 10
    <
    bz accept_bid_after_for@6
    frame_dig 7
    extract 2 0
    frame_dig 11
    intc_2 // 48
    *
    dig 1
    swap
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 1
    // smart_contracts/digital_marketplace/contract.py:237
    // if receipt != receipt_book[index]:
    frame_dig 8
    intc_2 // 48
    *
    intc_2 // 48
    extract3 // on error: Index access is out of bounds
    !=
    frame_dig 9
    frame_bury 0
    bz accept_bid_after_if_else@4
    // smart_contracts/digital_marketplace/contract.py:238
    // encumbered_receipts = encumbered_receipts.append(receipt)
    frame_dig 9
    extract 2 0
    frame_dig 1
    concat
    dup
    len
    intc_2 // 48
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

accept_bid_after_if_else@4:
    frame_dig 0
    frame_bury 9
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 11
    b accept_bid_for_header@1

accept_bid_after_for@6:
    // smart_contracts/digital_marketplace/contract.py:240
    // if encumbered_receipts:
    frame_dig 9
    intc_0 // 0
    extract_uint16
    bz accept_bid_else_body@8
    // smart_contracts/digital_marketplace/contract.py:241
    // self.receipt_book[current_best_bidder] = encumbered_receipts
    frame_dig 6
    dup
    box_del
    pop
    frame_dig 9
    box_put

accept_bid_after_if_else@9:
    // smart_contracts/digital_marketplace/contract.py:247
    // self.deposited.get(Txn.sender, default=UInt64(0))
    txn Sender
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    // smart_contracts/digital_marketplace/contract.py:248
    // + current_best_bid.amount.native
    frame_dig 4
    pushint 32 // 32
    extract_uint64
    // smart_contracts/digital_marketplace/contract.py:247-248
    // self.deposited.get(Txn.sender, default=UInt64(0))
    // + current_best_bid.amount.native
    +
    // smart_contracts/digital_marketplace/contract.py:249
    // + sales_box_mbr(self.sales.key_prefix.length)
    pushint 5 // 5
    callsub sales_box_mbr
    // smart_contracts/digital_marketplace/contract.py:246
    // self.deposited[Txn.sender] = (
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:247-249
    // self.deposited.get(Txn.sender, default=UInt64(0))
    // + current_best_bid.amount.native
    // + sales_box_mbr(self.sales.key_prefix.length)
    cover 2
    +
    // smart_contracts/digital_marketplace/contract.py:246
    // self.deposited[Txn.sender] = (
    bytec_0 // "deposited"
    // smart_contracts/digital_marketplace/contract.py:246-250
    // self.deposited[Txn.sender] = (
    //     self.deposited.get(Txn.sender, default=UInt64(0))
    //     + current_best_bid.amount.native
    //     + sales_box_mbr(self.sales.key_prefix.length)
    // )
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:251-255
    // itxn.AssetTransfer(
    //     xfer_asset=asset.native,
    //     asset_receiver=current_best_bidder,
    //     asset_amount=sale.amount.native,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:252
    // xfer_asset=asset.native,
    frame_dig -1
    btoi
    // smart_contracts/digital_marketplace/contract.py:254
    // asset_amount=sale.amount.native,
    frame_dig 3
    intc_0 // 0
    extract_uint64
    itxn_field AssetAmount
    frame_dig 5
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:251
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/digital_marketplace/contract.py:251-255
    // itxn.AssetTransfer(
    //     xfer_asset=asset.native,
    //     asset_receiver=current_best_bidder,
    //     asset_amount=sale.amount.native,
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:257
    // del self.sales[sale_key]
    frame_dig 2
    box_del
    pop
    retsub

accept_bid_else_body@8:
    // smart_contracts/digital_marketplace/contract.py:243
    // self.deposited[current_best_bidder] += receipt_book_box_mbr()
    frame_dig 5
    dup
    intc_0 // 0
    bytec_0 // "deposited"
    app_local_get_ex
    assert // check self.deposited exists for account
    // smart_contracts/digital_marketplace/subroutines.py:25-33
    // return UInt64(
    //     2_500
    //     + 400
    //     * (
    //         # assuming it's possible to fill an entire box
    //         64
    //         + 32768
    //     )
    // )
    intc 4 // 13135300
    // smart_contracts/digital_marketplace/contract.py:243
    // self.deposited[current_best_bidder] += receipt_book_box_mbr()
    +
    bytec_0 // "deposited"
    swap
    app_local_put
    // smart_contracts/digital_marketplace/contract.py:244
    // del self.receipt_book[current_best_bidder]
    frame_dig 6
    box_del
    pop
    b accept_bid_after_if_else@9

{
  "version": 3,
  "sources": [
    "../../digital_marketplace/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAgFK;;AAAA;AAAA;AAAA;;AAAA;AAhFL;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgFK;;;AAAA;;AAhBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAhEL;;;AAgEK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAjDL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAiDK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;AAAA;;AAqCK;;;AAAA;;AATA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA5BL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BK;;;AAAA;;AA5BL;;AAAA;;;;;;;;;AA4BA;;;AAEe;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGuB;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AAAoD;;AAAA;;AADzC;;AACX;;AAAA;AADJ;AAAA;AAAA;;AAIR;;;AAEmB;;AAAA;;AAAA;;AAAA;;AAAJ;AAAP;AAEe;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAEA;AAEmB;;AACF;;;;;;;;;AAHjB;;;AAAA;;;AAAA;;AAMR;;;AAIe;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAgC;;AAAhC;AAAP;AAEe;;AAAf;AAAA;AAAA;AAAA;AAAA;AA/CO;;AA+CP;AAAA;AAAA;AAAA;AAKgB;;AAAA;;AAAZ;AADA;;AAAA;AAAA;;;;AAAA;AAC+C;;;;AAD/C;AADqB;;AAAyB;;AAAA;;AAAZ;AAAlC;AADJ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMR;;;AAEe;;AAAA;;;AAAyB;;AAAzB;AAAP;AAGuB;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AADW;;AACX;AA5DG;;AA4DH;AADJ;AAAA;AAAA;AAIA;AACe;;AAAA;;AAAA;AACI;;AACF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAHjB;;;AAAA;;;AAAA;AAMA;;;AAER;;;AAEe;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAlB;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEe;;AAAA;;;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA;AACe;;AAAA;;AAAA;AACI;;AACF;;AAAA;AAAA;AAAA;AAAA;;;;;;;AAHjB;;;AAAA;;;AAAA;AAMA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 3 44500"
    },
    "10": {
      "op": "bytecblock \"deposited\" \"sales\""
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "30": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "33": {
      "op": "pushbytess 0x3625e4eb 0x13000a94 0xa6920066 0x75e48063 0x22174a73 // method \"deposit(pay)void\", method \"sponsor_asset(asset)void\", method \"open_sale(axfer,uint64)void\", method \"close_sale((address,uint64))void\", method \"buy((address,uint64),pay)void\""
    },
    "60": {
      "op": "txna ApplicationArgs 0"
    },
    "63": {
      "op": "match main_deposit_route@5 main_sponsor_asset_route@6 main_open_sale_route@7 main_close_sale_route@8 main_buy_route@9"
    },
    "75": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "76": {
      "op": "return"
    },
    "77": {
      "block": "main_buy_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "80": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "83": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "84": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0"
      ]
    },
    "87": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[40]%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "tmp%29#0"
      ]
    },
    "89": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[40]%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "tmp%29#0",
        "1"
      ]
    },
    "90": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "91": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "92": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "94": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "reinterpret_bytes[40]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "96": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "97": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "101": {
      "op": "return"
    },
    "102": {
      "block": "main_close_sale_route@8",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "103": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%20#0"
      ],
      "stack_out": [
        "1",
        "tmp%20#0"
      ]
    },
    "105": {
      "op": "shl",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "106": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "3"
      ]
    },
    "107": {
      "op": "&",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "108": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[40]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "115": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "op": "callsub close_sale",
      "stack_out": []
    },
    "118": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "119": {
      "op": "return"
    },
    "120": {
      "block": "main_open_sale_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "122": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "123": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "124": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "126": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "127": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "130": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "132": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "134": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "136": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "137": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "140": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "op": "callsub open_sale",
      "stack_out": []
    },
    "143": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "144": {
      "op": "return"
    },
    "145": {
      "block": "main_sponsor_asset_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "147": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "148": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "149": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "151": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "152": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "155": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "156": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "158": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "op": "callsub sponsor_asset",
      "stack_out": []
    },
    "161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "162": {
      "op": "return"
    },
    "163": {
      "block": "main_deposit_route@5",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "164": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "166": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "167": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "168": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "175": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%8#0",
        "1"
      ]
    },
    "176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "182": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "183": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "op": "callsub deposit",
      "stack_out": []
    },
    "186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "187": {
      "op": "return"
    },
    "188": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "190": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "193": {
      "op": "txn ApplicationID"
    },
    "195": {
      "op": "!"
    },
    "196": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "197": {
      "op": "intc_1 // 1"
    },
    "198": {
      "op": "return"
    },
    "199": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "202": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "209": {
      "error": "Different sender",
      "op": "assert // Different sender",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "212": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "217": {
      "op": "assert",
      "stack_out": []
    },
    "218": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "220": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "221": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"deposited\""
      ]
    },
    "222": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "224": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "226": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "227": {
      "op": "frame_dig -1",
      "stack_out": [
        "state_get%0#0",
        "payment#0 (copy)"
      ]
    },
    "229": {
      "op": "gtxns Amount",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "231": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "233": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "235": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%0#0"
      ]
    },
    "236": {
      "op": "bytec_0 // \"deposited\""
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "238": {
      "op": "app_local_put",
      "stack_out": []
    },
    "239": {
      "retsub": true,
      "op": "retsub"
    },
    "240": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "sponsor_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "243": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "247": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "249": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "251": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "252": {
      "op": "assert",
      "stack_out": []
    },
    "253": {
      "op": "txn Sender"
    },
    "255": {
      "op": "dup"
    },
    "256": {
      "op": "intc_0 // 0"
    },
    "257": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "258": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "259": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0"
      ]
    },
    "260": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "262": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "263": {
      "op": "bytec_0 // \"deposited\""
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "265": {
      "op": "app_local_put",
      "stack_out": []
    },
    "266": {
      "op": "itxn_begin"
    },
    "267": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "270": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "272": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "274": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "276": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "278": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "279": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "282": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "284": {
      "op": "itxn_submit"
    },
    "285": {
      "retsub": true,
      "op": "retsub"
    },
    "286": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "params": {
        "asset_deposit#0": "uint64",
        "cost#0": "bytes"
      },
      "block": "open_sale",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "289": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_deposit#0 (copy)"
      ],
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "291": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "295": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "296": {
      "error": "Different sender",
      "op": "assert // Different sender",
      "stack_out": []
    },
    "297": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "299": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "301": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "303": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "304": {
      "op": "assert",
      "stack_out": []
    },
    "305": {
      "op": "txn Sender"
    },
    "307": {
      "op": "dup"
    },
    "308": {
      "op": "intc_0 // 0"
    },
    "309": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "310": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "311": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "312": {
      "op": "intc 4 // 44500",
      "defined_out": [
        "44500",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "44500"
      ]
    },
    "314": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "new_state_value%0#0"
      ]
    },
    "315": {
      "op": "bytec_0 // \"deposited\""
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "317": {
      "op": "app_local_put",
      "stack_out": []
    },
    "318": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "320": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "322": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "323": {
      "op": "frame_dig -1",
      "defined_out": [
        "cost#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "cost#0 (copy)"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "326": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "331": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x0000"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "336": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "338": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "asset_deposit#0 (copy)"
      ]
    },
    "340": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "to_encode%1#0"
      ]
    },
    "342": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "344": {
      "op": "bytec_1 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "\"sales\""
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"sales\"",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "347": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "348": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "{box_del}"
      ]
    },
    "349": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "350": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "351": {
      "op": "box_put",
      "stack_out": []
    },
    "352": {
      "retsub": true,
      "op": "retsub"
    },
    "353": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "params": {
        "sale_key#0": "bytes"
      },
      "block": "close_sale",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "356": {
      "op": "frame_dig -1",
      "defined_out": [
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "sale_key#0 (copy)"
      ]
    },
    "358": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "361": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0"
      ]
    },
    "363": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "364": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "365": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "368": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"deposited\""
      ]
    },
    "369": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "371": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "373": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "374": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%4#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "state_get%0#0"
      ]
    },
    "377": {
      "op": "intc 4 // 44500",
      "defined_out": [
        "44500",
        "state_get%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "state_get%0#0",
        "44500"
      ]
    },
    "379": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "380": {
      "op": "bytec_0 // \"deposited\""
    },
    "381": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "382": {
      "op": "app_local_put",
      "stack_out": []
    },
    "383": {
      "op": "itxn_begin"
    },
    "384": {
      "op": "frame_dig -1",
      "stack_out": [
        "sale_key#0 (copy)"
      ]
    },
    "386": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "sale_key#0 (copy)",
        "32"
      ]
    },
    "388": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "389": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "391": {
      "op": "bytec_1 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "\"sales\""
      ]
    },
    "392": {
      "op": "frame_dig -1",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "\"sales\"",
        "sale_key#0 (copy)"
      ]
    },
    "394": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0"
      ]
    },
    "395": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "396": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "397": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0",
        "maybe_value%1#0"
      ]
    },
    "398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "399": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "400": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0"
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "403": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ]
    },
    "405": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "406": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "408": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "axfer"
      ]
    },
    "409": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "411": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "412": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "414": {
      "op": "itxn_submit"
    },
    "415": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "416": {
      "op": "pop",
      "stack_out": []
    },
    "417": {
      "retsub": true,
      "op": "retsub"
    },
    "418": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy",
      "params": {
        "sale_key#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "421": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "423": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "425": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "427": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "428": {
      "error": "Different sender",
      "op": "assert // Different sender",
      "stack_out": []
    },
    "429": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "431": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "433": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "435": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "436": {
      "op": "assert",
      "stack_out": []
    },
    "437": {
      "op": "bytec_1 // \"sales\"",
      "defined_out": [
        "\"sales\""
      ],
      "stack_out": [
        "\"sales\""
      ]
    },
    "438": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"sales\"",
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "\"sales\"",
        "sale_key#0 (copy)"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "441": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "442": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "443": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "444": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "447": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%6#0",
        "reinterpret_biguint%0#0",
        "payment#0 (copy)"
      ]
    },
    "449": {
      "op": "gtxns Amount",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ]
    },
    "451": {
      "op": "dup",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "reinterpret_biguint%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "452": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "reinterpret_biguint%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "453": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "455": {
      "op": "b==",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "456": {
      "op": "assert",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "457": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "sale_key#0 (copy)"
      ]
    },
    "459": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "462": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)"
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "0"
      ]
    },
    "464": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "465": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "466": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%1#0"
      ]
    },
    "467": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ]
    },
    "469": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "reinterpret_bytes[32]%0#0",
        "new_state_value%0#0"
      ]
    },
    "470": {
      "op": "bytec_0 // \"deposited\""
    },
    "471": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "reinterpret_bytes[32]%0#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "472": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "473": {
      "op": "itxn_begin"
    },
    "474": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "sale_key#0 (copy)"
      ]
    },
    "476": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "sale_key#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "sale_key#0 (copy)",
        "32"
      ]
    },
    "478": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "479": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "481": {
      "op": "dig 2",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "483": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "484": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "485": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "486": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "487": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "489": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "491": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "493": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "axfer"
      ]
    },
    "494": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "497": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "499": {
      "op": "itxn_submit"
    },
    "500": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "501": {
      "op": "pop",
      "stack_out": []
    },
    "502": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
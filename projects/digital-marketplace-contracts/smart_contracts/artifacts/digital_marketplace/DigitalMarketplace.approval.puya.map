{
  "version": 3,
  "sources": [
    "../../digital_marketplace/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAgEK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAhEL;;;AAgEK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAjDL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAiDK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;AAAA;;AAqCK;;;AAAA;;AATA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA5BL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BK;;;AAAA;;AA5BL;;AAAA;;;;;;;;;AA4BA;;;AAEe;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGuB;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AAAoD;;AAAA;;AADzC;;AACX;;AAAA;AADJ;AAAA;AAAA;;AAIR;;;AAEmB;;AAAA;;AAAA;;AAAA;;AAAJ;AAAP;AAEe;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAEA;AAEmB;;AACF;;;;;;;;;AAHjB;;;AAAA;;;AAAA;;AAMR;;;AAIe;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAgC;;AAAhC;AAAP;AAEe;;AAAf;AAAA;AAAA;AAAA;AAAA;AA/CO;;AA+CP;AAAA;AAAA;AAAA;AAKgB;;AAAA;;AAAZ;AADA;;AAAA;AAAA;;;;AAAA;AAC+C;;;;AAD/C;AADqB;;AAAyB;;AAAA;;AAAZ;AAAlC;AADJ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMR;;;AAEe;;AAAA;;;AAAyB;;AAAzB;AAAP;AAGuB;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AADW;;AACX;AA5DG;;AA4DH;AADJ;AAAA;AAAA;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEP;AACe;;AAAA;;AAAA;AACI;;AACF;;AAAA;AAAA;;;;;;;AAHjB;;;AAAA;;;AAAA;AAMA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 3 44500"
    },
    "10": {
      "op": "bytecblock \"deposited\" \"sales\""
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "30": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "33": {
      "op": "pushbytess 0x3625e4eb 0x13000a94 0xa6920066 0x75e48063 // method \"deposit(pay)void\", method \"sponsor_asset(asset)void\", method \"open_sale(axfer,uint64)void\", method \"close_sale((address,uint64))void\""
    },
    "55": {
      "op": "txna ApplicationArgs 0"
    },
    "58": {
      "op": "match main_deposit_route@5 main_sponsor_asset_route@6 main_open_sale_route@7 main_close_sale_route@8"
    },
    "68": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "69": {
      "op": "return"
    },
    "70": {
      "block": "main_close_sale_route@8",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "71": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%20#0"
      ],
      "stack_out": [
        "1",
        "tmp%20#0"
      ]
    },
    "73": {
      "op": "shl",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "74": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "3"
      ]
    },
    "75": {
      "op": "&",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[40]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "83": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "op": "callsub close_sale",
      "stack_out": []
    },
    "86": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "87": {
      "op": "return"
    },
    "88": {
      "block": "main_open_sale_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "91": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "92": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "94": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "95": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "97": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "98": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "100": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "102": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "104": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "105": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "108": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "op": "callsub open_sale",
      "stack_out": []
    },
    "111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "112": {
      "op": "return"
    },
    "113": {
      "block": "main_sponsor_asset_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "115": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "119": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "120": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "123": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "124": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "126": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "op": "callsub sponsor_asset",
      "stack_out": []
    },
    "129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "130": {
      "op": "return"
    },
    "131": {
      "block": "main_deposit_route@5",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "132": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "134": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "135": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "136": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "137": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "141": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "143": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%8#0",
        "1"
      ]
    },
    "144": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "145": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "146": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "148": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "149": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "150": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "151": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "op": "callsub deposit",
      "stack_out": []
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "155": {
      "op": "return"
    },
    "156": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "158": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "161": {
      "op": "txn ApplicationID"
    },
    "163": {
      "op": "!"
    },
    "164": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "165": {
      "op": "intc_1 // 1"
    },
    "166": {
      "op": "return"
    },
    "167": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "170": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "172": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "assert",
      "stack_out": []
    },
    "178": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "180": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "182": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "185": {
      "op": "assert",
      "stack_out": []
    },
    "186": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "189": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"deposited\""
      ]
    },
    "190": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "192": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "194": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "195": {
      "op": "frame_dig -1",
      "stack_out": [
        "state_get%0#0",
        "payment#0 (copy)"
      ]
    },
    "197": {
      "op": "gtxns Amount",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "199": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "201": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "203": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%0#0"
      ]
    },
    "204": {
      "op": "bytec_0 // \"deposited\""
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "206": {
      "op": "app_local_put",
      "stack_out": []
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "sponsor_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "211": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "215": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "217": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "219": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "220": {
      "op": "assert",
      "stack_out": []
    },
    "221": {
      "op": "txn Sender"
    },
    "223": {
      "op": "dup"
    },
    "224": {
      "op": "intc_0 // 0"
    },
    "225": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "226": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "227": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0"
      ]
    },
    "228": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "230": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "231": {
      "op": "bytec_0 // \"deposited\""
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "233": {
      "op": "app_local_put",
      "stack_out": []
    },
    "234": {
      "op": "itxn_begin"
    },
    "235": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "238": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "240": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "242": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "244": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "246": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "247": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "250": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "252": {
      "op": "itxn_submit"
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "params": {
        "asset_deposit#0": "uint64",
        "cost#0": "bytes"
      },
      "block": "open_sale",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "257": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_deposit#0 (copy)"
      ],
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "assert",
      "stack_out": []
    },
    "265": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "267": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "269": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "272": {
      "op": "assert",
      "stack_out": []
    },
    "273": {
      "op": "txn Sender"
    },
    "275": {
      "op": "dup"
    },
    "276": {
      "op": "intc_0 // 0"
    },
    "277": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "278": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "279": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "280": {
      "op": "intc 4 // 44500",
      "defined_out": [
        "44500",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "44500"
      ]
    },
    "282": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "new_state_value%0#0"
      ]
    },
    "283": {
      "op": "bytec_0 // \"deposited\""
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "285": {
      "op": "app_local_put",
      "stack_out": []
    },
    "286": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "288": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "290": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "291": {
      "op": "frame_dig -1",
      "defined_out": [
        "cost#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "cost#0 (copy)"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "294": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "298": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "299": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x0000"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "304": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "306": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "asset_deposit#0 (copy)"
      ]
    },
    "308": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "to_encode%1#0"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "311": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "312": {
      "op": "bytec_1 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "\"sales\""
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"sales\"",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "315": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "316": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0",
        "{box_del}"
      ]
    },
    "317": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "319": {
      "op": "box_put",
      "stack_out": []
    },
    "320": {
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "params": {
        "sale_key#0": "bytes"
      },
      "block": "close_sale",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "324": {
      "op": "frame_dig -1",
      "defined_out": [
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "sale_key#0 (copy)"
      ]
    },
    "326": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "329": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "332": {
      "op": "assert",
      "stack_out": []
    },
    "333": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "335": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "336": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"deposited\""
      ]
    },
    "337": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "339": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "341": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "342": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%4#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "state_get%0#0"
      ]
    },
    "345": {
      "op": "intc 4 // 44500",
      "defined_out": [
        "44500",
        "state_get%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "state_get%0#0",
        "44500"
      ]
    },
    "347": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "348": {
      "op": "bytec_0 // \"deposited\""
    },
    "349": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "350": {
      "op": "app_local_put",
      "stack_out": []
    },
    "351": {
      "op": "bytec_1 // \"sales\"",
      "defined_out": [
        "\"sales\""
      ],
      "stack_out": [
        "\"sales\""
      ]
    },
    "352": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"sales\"",
        "sale_key#0 (copy)"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "356": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "sale#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sale#0",
        "maybe_exists%1#0"
      ]
    },
    "357": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%5#0",
        "sale#0"
      ]
    },
    "358": {
      "op": "itxn_begin"
    },
    "359": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "sale#0",
        "sale_key#0 (copy)"
      ]
    },
    "361": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "sale#0",
        "sale_key#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sale#0",
        "sale_key#0 (copy)",
        "32"
      ]
    },
    "363": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "sale#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sale#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "364": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "sale#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sale#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "366": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "sale#0"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "sale#0",
        "0"
      ]
    },
    "369": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "370": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%5#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "372": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%5#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "374": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "376": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "axfer"
      ]
    },
    "377": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "379": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "380": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "382": {
      "op": "itxn_submit"
    },
    "383": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "384": {
      "op": "pop",
      "stack_out": []
    },
    "385": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
{
  "version": 3,
  "sources": [
    "../../digital_marketplace/contract.py",
    "../../digital_marketplace/subroutines.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AA8JK;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA9JL;;;AA8JK;;;AAAA;;AAzBA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AA9FL;;;AAAA;;;AA8FK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA/EL;;;AA+EK;;;AAAA;;AAhBA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA/DL;;;AAAA;AAAA;;AA+DK;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA3CL;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AA2CK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AAAA;AAAA;;AA6BK;;;AAAA;;AAXA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAkBK;;;AAAA;;AAXA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOK;;;AAAA;;AAPL;;AAAA;;;;;;;;;AC7CA;;;AAKQ;;AAEA;;AAFA;AAEK;;AAFL;AAMA;;AANA;AAQA;;AARA;AAQI;;AARJ;AAUA;;AAVA;AAYC;;AAZD;AAFW;;;AAAA;AAAR;;;AAAA;AAAP;ADiDJ;;;AAEe;;AAAA;;AAAkB;;AAAlB;AAAP;AAEI;;AAAA;;AAAoB;;AAApB;AADJ;AAKuB;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AAAoD;;AAAA;;AADzC;;AACX;;AAAA;AADJ;AAAA;AAAA;;AAIR;;;AAEW;;AAAX;;;AAC2B;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAA9B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAEA;AAAsB;;;;;;AAAtB;;;AAAA;;;AAAA;;AAEA;AACa;;AAAkC;AAAf;AAAA;AAAA;AAAA;;;;;AADhC;;;AAAA;;;AAAA;;AAIZ;;;AAEmB;;AAAA;;AAAA;;AAAA;;AAAJ;AAAP;AAIe;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAEA;AAEmB;;AACF;;;;;;;;;AAHjB;;;;AAAA;;;AAAA;;AAMR;;;AAIe;;AAAA;;AAAwB;;AAAxB;AAAP;AAEI;;AAAA;;AAAgC;;AAAhC;AADJ;AAKiB;;AAAyB;;AAAA;;AAAZ;AADnB;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAJ;AAAP;AAEe;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA4C;;AAAd;;;AAA9B;AAAA;AAAA;AAAA;AAGgB;;AAAA;;AAAZ;AADmB;;AAAA;AAAA;;;;AAAA;AAC4B;AAD5B;AAAvB;;AAAA;;AAAA;;AAIR;;;AAEwC;;AAAa;;AAAA;AAAlC;AAEX;AAEmB;;AACF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAHjB;;;;AAAA;;;AAAA;AAOI;;AADyB;AAAA;AAAA;AACL;AADK;;AAAA;AAEX;;AAAd;;;AAFW;;AAAc;;AAAA;AAA7B;AAAA;AAAA;AAIA;;;AAER;;;AAEuB;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACe;;AAAA;;;AAAf;AAAA;AAAA;AAAA;AAAA;AAAyC;;AAAA;AAAA;AAAA;;AAAA;AAEX;;AAAd;;;AAFyB;AAAzC;AAAA;AAAA;AAAA;AAIA;AACe;;AAAA;;AAAA;AACI;;AACF;;AAAA;AAAA;AAAA;AAAA;;;;;;;AAHjB;;;;AAAA;;;AAAA;AAMA;;;AAER;;;;;;;;AAEyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACd;AAAA;AAAX;;;AAEgB;;AAAA;;;AAAA;;AAAA;AAAkC;;AAAA;AAAlC;AADJ;AAKwB;;AADM;;AAAA;AAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQW;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAEG;AAAoC;;AAApC;AAAA;AAAA;;AAAX;;;AAEgB;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;ACxHI;AAAA;AAAA;;AAAP;AAAL;;AAAK;;AAAA;;AAAA;AAAb;;;AACW;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAX;;;AACmB;;;;;ADwHnB;;;AAC+B;;AAAf;AAAA;AAAA;AAAA;AAAA;AAA8B;AACb;;AADa;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAA9B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGoD;;AAAA;;AAAA;AAApD;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAIA;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAAA;;;AACI;;AAAA;;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AClIH;;AAAA;AAAA;AAAA;;;;;AAGF;AAAO;;;ADoHS;;;AAeA;;AAAf;AAAA;AAAA;AAAA;AAAA;ACrJD;;ADqJC;AAAA;AAAA;AAAA;AAEI;;AAAA;;AAAA;AADyC;;;;AAAA;AAAA;AAA7C;AAA8B;;AAA9B;AAAA;AAAA;;AAAA;AAAA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAC4B;;AAAxB;;AAAA;AADJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;AA2BZ;;;;;AAEwD;;AAAnB;AAAA;AAAA;AAA+B;AAA/B;;AAAA;AAAd;;AAAf;AAAA;;AAAA;AAEc;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAAA;;AAAA;AACd;AAA8B;;AAA9B;AAAA;AAAA;;AAA6C;AAA7C;AAEgB;AAAA;AAAP;AAAA;;AAAA;;AAAA;AAAjB;;;AAEqC;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAjB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAJ;;;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAA;AADH;;;AAEO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AACJ;;AADI;AAAJ;;;AAIoB;;AAAnB;AAAA;AAAA;AAA+B;AAA/B;;AAAA;AACE;;AAAA;;AAAA;AAFS;;AACX;;AAAA;AADJ;AAAA;AAAA;AAPC;;AAAA;AAAA;AAAA;;;;;AAYD;AAA8B;;AAA9B;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;AAED;AAA8B;;AAA9B;AAAA;AAAA;AAAJ;AAAA;AAAX;;;AAC2B;;AAAf;AAAA;AAAA;AAAA;AAAA;AChLD;;ADgLC;AAAA;AAAA;AAAA;AACI;AAA8B;;AAA9B;AAAJ;;;AAEZ;;;AAE8C;;AAA3B;;AAAA;AACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AACY;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAGI;;AAAnB;AAAA;AAAA;AAAuC;AAAvC;;AAAA;AACE;;AAAA;;AAAA;AADF;AAEgB;;AAAd;;;AAHS;;AACX;;AAAA;AADJ;AAAA;AAAA;AAKA;AACe;;AAAA;AACI;AAAA;;;AACF;;AAAA;AAAA;;;;;;;AAHjB;;;;AAAA;;;AAAA;AAMA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 48 16 13135300"
    },
    "11": {
      "op": "bytecblock \"deposited\" \"placed_bids\" \"sales\" 0x0000"
    },
    "44": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "46": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "49": {
      "op": "pushbytess 0x3625e4eb 0x21f1ddff 0x13000a94 0xa6920066 0x09544810 0xd49ac60e 0xa18f1ffc 0x456e3975 0xf8e0efaf // method \"deposit(pay)void\", method \"withdraw(uint64)void\", method \"sponsor_asset(asset)void\", method \"open_sale(axfer,uint64)void\", method \"close_sale(asset)void\", method \"buy((address,uint64))void\", method \"bid((address,uint64),uint64)void\", method \"claim_unencumbered_bids()void\", method \"accept_bid(uint64)void\""
    },
    "96": {
      "op": "txna ApplicationArgs 0"
    },
    "99": {
      "op": "match main_deposit_route@5 main_withdraw_route@6 main_sponsor_asset_route@7 main_open_sale_route@8 main_close_sale_route@9 main_buy_route@10 main_bid_route@11 main_claim_unencumbered_bids_route@12 main_accept_bid_route@13"
    },
    "119": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "return"
    },
    "121": {
      "block": "main_accept_bid_route@13",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "122": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%45#0"
      ],
      "stack_out": [
        "1",
        "tmp%45#0"
      ]
    },
    "124": {
      "op": "shl",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "125": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "3"
      ]
    },
    "127": {
      "op": "&",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "128": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "135": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.accept_bid",
      "op": "callsub accept_bid",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "139": {
      "op": "return"
    },
    "140": {
      "block": "main_claim_unencumbered_bids_route@12",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "141": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%40#0"
      ],
      "stack_out": [
        "1",
        "tmp%40#0"
      ]
    },
    "143": {
      "op": "shl",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "144": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "3"
      ]
    },
    "146": {
      "op": "&",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.claim_unencumbered_bids",
      "op": "callsub claim_unencumbered_bids"
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "155": {
      "op": "return"
    },
    "156": {
      "block": "main_bid_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "159": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "160": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "162": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "163": {
      "op": "txna ApplicationArgs 1"
    },
    "166": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[40]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "169": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.bid",
      "op": "callsub bid",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "173": {
      "op": "return"
    },
    "174": {
      "block": "main_buy_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "176": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "177": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[40]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "184": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "187": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "188": {
      "op": "return"
    },
    "189": {
      "block": "main_close_sale_route@9",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "190": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%25#0"
      ],
      "stack_out": [
        "1",
        "tmp%25#0"
      ]
    },
    "192": {
      "op": "shl",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "193": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "3"
      ]
    },
    "195": {
      "op": "&",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "203": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "204": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "206": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "op": "callsub close_sale",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "210": {
      "op": "return"
    },
    "211": {
      "block": "main_open_sale_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "213": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "214": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "217": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "218": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "220": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "221": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "222": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "223": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "225": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "228": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "229": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "232": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "op": "callsub open_sale",
      "stack_out": []
    },
    "235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "236": {
      "op": "return"
    },
    "237": {
      "block": "main_sponsor_asset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "239": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "240": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "241": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "243": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "244": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "247": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "248": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "250": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "op": "callsub sponsor_asset",
      "stack_out": []
    },
    "253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "return"
    },
    "255": {
      "block": "main_withdraw_route@6",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "256": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "1",
        "tmp%9#0"
      ]
    },
    "258": {
      "op": "shl",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "259": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "5"
      ]
    },
    "261": {
      "op": "&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "262": {
      "error": "OnCompletion is not one of NoOp, CloseOut",
      "op": "assert // OnCompletion is not one of NoOp, CloseOut",
      "stack_out": []
    },
    "263": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "265": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "266": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "269": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "273": {
      "op": "return"
    },
    "274": {
      "block": "main_deposit_route@5",
      "stack_in": [],
      "op": "intc_1 // 1"
    },
    "275": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "277": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "278": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "280": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "281": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "282": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "284": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "285": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "287": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%8#0",
        "1"
      ]
    },
    "288": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "289": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "290": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "292": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "294": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "295": {
      "callsub": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "op": "callsub deposit",
      "stack_out": []
    },
    "298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "299": {
      "op": "return"
    },
    "300": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "302": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "305": {
      "op": "txn ApplicationID"
    },
    "307": {
      "op": "!"
    },
    "308": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "309": {
      "op": "intc_1 // 1"
    },
    "310": {
      "op": "return"
    },
    "311": {
      "subroutine": "smart_contracts.digital_marketplace.subroutines.sales_box_mbr",
      "params": {
        "prefix_length#0": "uint64"
      },
      "block": "sales_box_mbr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "314": {
      "op": "frame_dig -1",
      "defined_out": [
        "prefix_length#0 (copy)"
      ],
      "stack_out": [
        "prefix_length#0 (copy)"
      ]
    },
    "316": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "prefix_length#0 (copy)"
      ],
      "stack_out": [
        "prefix_length#0 (copy)",
        "32"
      ]
    },
    "318": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "321": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "322": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2"
      ]
    },
    "324": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "325": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%2#0",
        "8"
      ]
    },
    "327": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "328": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%3#0",
        "8"
      ]
    },
    "330": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "331": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%4#0",
        "2"
      ]
    },
    "333": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "334": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "40"
      ]
    },
    "336": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "337": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "400"
      ]
    },
    "340": {
      "op": "*",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "341": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2500"
      ]
    },
    "344": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "345": {
      "retsub": true,
      "op": "retsub"
    },
    "346": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.deposit",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "349": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "351": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "355": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "356": {
      "error": "Different sender",
      "op": "assert // Different sender",
      "stack_out": []
    },
    "357": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "359": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "361": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "363": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "364": {
      "error": "Wrong receiver",
      "op": "assert // Wrong receiver",
      "stack_out": []
    },
    "365": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "368": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"deposited\""
      ]
    },
    "369": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "371": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "373": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "374": {
      "op": "frame_dig -1",
      "stack_out": [
        "state_get%0#0",
        "payment#0 (copy)"
      ]
    },
    "376": {
      "op": "gtxns Amount",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "378": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "380": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "state_get%0#0",
        "tmp%7#0"
      ]
    },
    "382": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%0#0"
      ]
    },
    "383": {
      "op": "bytec_0 // \"deposited\""
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "385": {
      "op": "app_local_put",
      "stack_out": []
    },
    "386": {
      "retsub": true,
      "op": "retsub"
    },
    "387": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw",
      "params": {
        "amount#0": "bytes"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "390": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "bnz withdraw_else_body@3",
      "stack_out": []
    },
    "395": {
      "op": "txn Sender"
    },
    "397": {
      "op": "dup"
    },
    "398": {
      "op": "intc_0 // 0"
    },
    "399": {
      "op": "bytec_0 // \"deposited\""
    },
    "400": {
      "op": "app_local_get_ex"
    },
    "401": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account"
    },
    "402": {
      "op": "frame_dig -1"
    },
    "404": {
      "op": "btoi"
    },
    "405": {
      "op": "swap"
    },
    "406": {
      "op": "dig 1"
    },
    "408": {
      "op": "-"
    },
    "409": {
      "op": "uncover 2"
    },
    "411": {
      "op": "bytec_0 // \"deposited\""
    },
    "412": {
      "op": "uncover 2"
    },
    "414": {
      "op": "app_local_put"
    },
    "415": {
      "op": "itxn_begin"
    },
    "416": {
      "op": "txn Sender"
    },
    "418": {
      "op": "itxn_field Receiver"
    },
    "420": {
      "op": "itxn_field Amount"
    },
    "422": {
      "op": "intc_1 // pay"
    },
    "423": {
      "op": "itxn_field TypeEnum"
    },
    "425": {
      "op": "intc_0 // 0"
    },
    "426": {
      "op": "itxn_field Fee"
    },
    "428": {
      "op": "itxn_submit"
    },
    "429": {
      "retsub": true,
      "op": "retsub"
    },
    "430": {
      "block": "withdraw_else_body@3",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "431": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "433": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0"
      ]
    },
    "434": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0",
        "0"
      ]
    },
    "435": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "tmp%4#0",
        "0",
        "\"deposited\""
      ]
    },
    "436": {
      "op": "app_local_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "437": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%1#0"
      ]
    },
    "438": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "440": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "442": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "443": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "445": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "446": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "448": {
      "op": "itxn_submit"
    },
    "449": {
      "retsub": true,
      "op": "retsub"
    },
    "450": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.sponsor_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "sponsor_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "453": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "455": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "457": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "459": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "461": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "462": {
      "error": "Already opted in",
      "op": "assert // Already opted in",
      "stack_out": []
    },
    "463": {
      "op": "txn Sender"
    },
    "465": {
      "op": "dup"
    },
    "466": {
      "op": "intc_0 // 0"
    },
    "467": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "468": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "469": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0"
      ]
    },
    "470": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "472": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "473": {
      "op": "bytec_0 // \"deposited\""
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "475": {
      "op": "app_local_put",
      "stack_out": []
    },
    "476": {
      "op": "itxn_begin"
    },
    "477": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "479": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "480": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "482": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "484": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "486": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "488": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "490": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "493": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "495": {
      "op": "itxn_submit"
    },
    "496": {
      "retsub": true,
      "op": "retsub"
    },
    "497": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.open_sale",
      "params": {
        "asset_deposit#0": "uint64",
        "cost#0": "bytes"
      },
      "block": "open_sale",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "500": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_deposit#0 (copy)"
      ],
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "502": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "504": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "506": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "507": {
      "error": "Different sender",
      "op": "assert // Different sender",
      "stack_out": []
    },
    "508": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_deposit#0 (copy)"
      ]
    },
    "510": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "512": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "515": {
      "error": "Wrong receiver",
      "op": "assert // Wrong receiver",
      "stack_out": []
    },
    "516": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "518": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "asset_deposit#0 (copy)"
      ]
    },
    "520": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0"
      ]
    },
    "524": {
      "op": "bytec_2 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0",
        "\"sales\""
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "\"sales\"",
        "sale_key#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "527": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "528": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "529": {
      "op": "bury 1",
      "stack_out": [
        "tmp%7#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "532": {
      "error": "Sale already exists",
      "op": "assert // Sale already exists",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "533": {
      "op": "txn Sender"
    },
    "535": {
      "op": "dup"
    },
    "536": {
      "op": "intc_0 // 0"
    },
    "537": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "538": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "539": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%1#0"
      ]
    },
    "540": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "5"
      ]
    },
    "542": {
      "callsub": "smart_contracts.digital_marketplace.subroutines.sales_box_mbr",
      "op": "callsub sales_box_mbr",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ]
    },
    "545": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "new_state_value%0#0"
      ]
    },
    "546": {
      "op": "bytec_0 // \"deposited\""
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "548": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "549": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%7#0",
        "asset_deposit#0 (copy)"
      ]
    },
    "551": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%7#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%1#0"
      ]
    },
    "553": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0"
      ]
    },
    "554": {
      "op": "frame_dig -1",
      "defined_out": [
        "cost#0 (copy)",
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0",
        "cost#0 (copy)"
      ]
    },
    "556": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "557": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%5#0",
        "0x0012"
      ]
    },
    "561": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "562": {
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%6#0",
        "0x0000"
      ]
    },
    "563": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "564": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "566": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%7#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%7#0",
        "{box_del}"
      ]
    },
    "567": {
      "op": "pop",
      "stack_out": [
        "tmp%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "568": {
      "op": "box_put",
      "stack_out": []
    },
    "569": {
      "retsub": true,
      "op": "retsub"
    },
    "570": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.close_sale",
      "params": {
        "asset#0": "uint64"
      },
      "block": "close_sale",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "573": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "578": {
      "op": "concat",
      "defined_out": [
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0"
      ]
    },
    "579": {
      "op": "itxn_begin"
    },
    "580": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "582": {
      "op": "bytec_2 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "\"sales\""
      ]
    },
    "583": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "\"sales\"",
        "sale_key#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0"
      ]
    },
    "586": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "587": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "588": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "590": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "591": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "594": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "596": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "asset#0 (copy)"
      ]
    },
    "598": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "600": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "axfer"
      ]
    },
    "602": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "605": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "607": {
      "op": "itxn_submit"
    },
    "608": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "0"
      ]
    },
    "611": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "0",
        "\"deposited\""
      ]
    },
    "612": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "613": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0"
      ]
    },
    "614": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "616": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "state_get%0#0"
      ]
    },
    "617": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "state_get%0#0",
        "5"
      ]
    },
    "619": {
      "callsub": "smart_contracts.digital_marketplace.subroutines.sales_box_mbr",
      "op": "callsub sales_box_mbr",
      "defined_out": [
        "state_get%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "state_get%0#0",
        "tmp%5#0"
      ]
    },
    "622": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "state_get%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "624": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "state_get%0#0",
        "tmp%5#0"
      ]
    },
    "626": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "new_state_value%0#0"
      ]
    },
    "627": {
      "op": "bytec_0 // \"deposited\""
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "629": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "630": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "631": {
      "op": "pop",
      "stack_out": []
    },
    "632": {
      "retsub": true,
      "op": "retsub"
    },
    "633": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy",
      "params": {
        "sale_key#0": "bytes"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "636": {
      "op": "txn Sender"
    },
    "638": {
      "op": "dup"
    },
    "639": {
      "op": "intc_0 // 0"
    },
    "640": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "641": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "642": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "643": {
      "op": "bytec_2 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "\"sales\""
      ]
    },
    "644": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"sales\"",
        "maybe_value%0#0",
        "sale_key#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "\"sales\"",
        "sale_key#0 (copy)"
      ]
    },
    "646": {
      "op": "concat",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "647": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "648": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "649": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "650": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "652": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "653": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "656": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "new_state_value%0#0"
      ]
    },
    "657": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "new_state_value%0#0",
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "bytec_0 // \"deposited\"",
      "stack_out": [
        "tmp%1#0",
        "new_state_value%0#0",
        "tmp%0#0",
        "\"deposited\""
      ]
    },
    "660": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "662": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "663": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "sale_key#0 (copy)"
      ]
    },
    "665": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "668": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)"
      ]
    },
    "669": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "0"
      ]
    },
    "670": {
      "op": "bytec_0 // \"deposited\"",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "671": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "672": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0"
      ]
    },
    "673": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "tmp%1#0 (copy)"
      ]
    },
    "675": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "676": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "677": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "8"
      ]
    },
    "679": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ]
    },
    "680": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "tmp%6#0",
        "5"
      ]
    },
    "682": {
      "callsub": "smart_contracts.digital_marketplace.subroutines.sales_box_mbr",
      "op": "callsub sales_box_mbr",
      "defined_out": [
        "maybe_value%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "685": {
      "op": "+",
      "defined_out": [
        "maybe_value%2#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ]
    },
    "686": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "new_state_value%1#0"
      ]
    },
    "687": {
      "op": "bytec_0 // \"deposited\""
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0",
        "\"deposited\"",
        "new_state_value%1#0"
      ]
    },
    "689": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "690": {
      "op": "itxn_begin"
    },
    "691": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "sale_key#0 (copy)"
      ]
    },
    "693": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "sale_key#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale_key#0 (copy)",
        "32"
      ]
    },
    "695": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "696": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "698": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "700": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "701": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "702": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "703": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "704": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "706": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "708": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "710": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "axfer"
      ]
    },
    "712": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "715": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "717": {
      "op": "itxn_submit"
    },
    "718": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "719": {
      "op": "pop",
      "stack_out": []
    },
    "720": {
      "retsub": true,
      "op": "retsub"
    },
    "721": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.bid",
      "params": {
        "sale_key#0": "bytes",
        "new_bid_amount#0": "bytes"
      },
      "block": "bid",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "724": {
      "op": "intc_0 // 0",
      "stack_out": [
        "placed_bids#0"
      ]
    },
    "725": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "placed_bids#0",
        "i#0"
      ]
    },
    "727": {
      "op": "dupn 2",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1"
      ]
    },
    "729": {
      "op": "bytec_2 // \"sales\"",
      "defined_out": [
        "\"sales\""
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "\"sales\""
      ]
    },
    "730": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"sales\"",
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "\"sales\"",
        "sale_key#0 (copy)"
      ]
    },
    "732": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "733": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "735": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "736": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "737": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "16"
      ]
    },
    "738": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "739": {
      "op": "dig 1",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "741": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "742": {
      "op": "substring3",
      "defined_out": [
        "maybe_best_bid#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_best_bid#0"
      ]
    },
    "743": {
      "op": "dup",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "tmp%0#0",
        "maybe_best_bid#0",
        "maybe_best_bid#0"
      ]
    },
    "744": {
      "op": "cover 2",
      "defined_out": [
        "maybe_best_bid#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_best_bid#0"
      ]
    },
    "746": {
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000",
        "maybe_best_bid#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_best_bid#0",
        "0x0000"
      ]
    },
    "747": {
      "op": "!=",
      "defined_out": [
        "maybe_best_bid#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "748": {
      "op": "bz bid_else_body@2",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0"
      ]
    },
    "751": {
      "op": "frame_dig 4"
    },
    "753": {
      "op": "extract 2 40"
    },
    "756": {
      "op": "pushint 32 // 32"
    },
    "758": {
      "op": "extract_uint64"
    },
    "759": {
      "op": "frame_dig -1"
    },
    "761": {
      "op": "btoi"
    },
    "762": {
      "op": "<"
    },
    "763": {
      "error": "Worse bid",
      "op": "assert // Worse bid"
    },
    "764": {
      "op": "txn Sender"
    },
    "766": {
      "op": "frame_dig -1"
    },
    "768": {
      "op": "concat"
    },
    "769": {
      "op": "dig 1"
    },
    "771": {
      "op": "box_get"
    },
    "772": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists"
    },
    "773": {
      "op": "dup"
    },
    "774": {
      "op": "intc_3 // 16"
    },
    "775": {
      "op": "extract_uint16"
    },
    "776": {
      "op": "dig 1"
    },
    "778": {
      "op": "len"
    },
    "779": {
      "op": "dig 2"
    },
    "781": {
      "op": "dig 2"
    },
    "783": {
      "op": "uncover 2"
    },
    "785": {
      "op": "substring3"
    },
    "786": {
      "op": "dup"
    },
    "787": {
      "op": "intc_0 // 0"
    },
    "788": {
      "op": "extract_uint16"
    },
    "789": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "790": {
      "op": "uncover 3"
    },
    "792": {
      "op": "replace2 2"
    },
    "794": {
      "op": "uncover 2"
    },
    "796": {
      "op": "intc_0 // 0"
    },
    "797": {
      "op": "uncover 3"
    },
    "799": {
      "op": "extract3"
    },
    "800": {
      "op": "swap"
    },
    "801": {
      "op": "concat"
    },
    "802": {
      "op": "dig 1"
    },
    "804": {
      "op": "box_del"
    },
    "805": {
      "op": "pop"
    },
    "806": {
      "op": "box_put"
    },
    "807": {
      "block": "bid_after_if_else@3",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "txn Sender"
    },
    "809": {
      "op": "dup"
    },
    "810": {
      "op": "intc_0 // 0"
    },
    "811": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "812": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "813": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "maybe_value%3#0"
      ]
    },
    "814": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "new_bid_amount#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "new_bid_amount#0 (copy)"
      ]
    },
    "816": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "tmp%15#0"
      ]
    },
    "817": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "new_state_value%0#0"
      ]
    },
    "818": {
      "op": "bytec_0 // \"deposited\""
    },
    "819": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%14#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "820": {
      "op": "app_local_put",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "821": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "822": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "tmp%16#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "\"placed_bids\"",
        "tmp%16#0"
      ]
    },
    "824": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%17#0"
      ]
    },
    "825": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "826": {
      "op": "bury 1",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "maybe_exists%4#0"
      ]
    },
    "828": {
      "op": "bz bid_else_body@8",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "831": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "832": {
      "op": "txn Sender"
    },
    "834": {
      "op": "concat"
    },
    "835": {
      "op": "box_get"
    },
    "836": {
      "op": "swap"
    },
    "837": {
      "op": "dup"
    },
    "838": {
      "op": "cover 2"
    },
    "840": {
      "op": "frame_bury 0"
    },
    "842": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists"
    },
    "843": {
      "op": "intc_0 // 0"
    },
    "844": {
      "op": "extract_uint16"
    },
    "845": {
      "op": "frame_bury 3"
    },
    "847": {
      "op": "intc_0 // 0"
    },
    "848": {
      "op": "frame_bury 1"
    },
    "850": {
      "block": "bid_for_header@13",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "i#0"
      ]
    },
    "852": {
      "op": "frame_dig 3",
      "defined_out": [
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "854": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "continue_looping%0#0"
      ]
    },
    "855": {
      "op": "bz bid_after_for@17",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "858": {
      "op": "frame_dig 0"
    },
    "860": {
      "op": "extract 2 0"
    },
    "863": {
      "op": "frame_dig 1"
    },
    "865": {
      "op": "intc_2 // 48"
    },
    "866": {
      "op": "*"
    },
    "867": {
      "op": "intc_2 // 48"
    },
    "868": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "869": {
      "error": "Index access is out of bounds",
      "op": "extract 0 40 // on error: Index access is out of bounds"
    },
    "872": {
      "op": "frame_dig -2"
    },
    "874": {
      "op": "=="
    },
    "875": {
      "op": "bz bid_after_if_else@16"
    },
    "878": {
      "op": "intc_1 // 1"
    },
    "879": {
      "op": "frame_dig 1"
    },
    "881": {
      "op": "frame_bury 2"
    },
    "883": {
      "block": "bid_after_inlined_smart_contracts.digital_marketplace.subroutines.find_placed_bid@18",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "found#0"
      ],
      "op": "bz bid_else_body@6",
      "defined_out": [],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "886": {
      "op": "txn Sender"
    },
    "888": {
      "op": "dup"
    },
    "889": {
      "op": "intc_0 // 0"
    },
    "890": {
      "op": "bytec_0 // \"deposited\""
    },
    "891": {
      "op": "app_local_get_ex"
    },
    "892": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account"
    },
    "893": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "894": {
      "op": "txn Sender"
    },
    "896": {
      "op": "concat"
    },
    "897": {
      "op": "box_get"
    },
    "898": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists"
    },
    "899": {
      "op": "extract 2 0"
    },
    "902": {
      "op": "frame_dig 2"
    },
    "904": {
      "op": "dup"
    },
    "905": {
      "op": "cover 4"
    },
    "907": {
      "op": "intc_2 // 48"
    },
    "908": {
      "op": "*"
    },
    "909": {
      "op": "swap"
    },
    "910": {
      "op": "dig 1"
    },
    "912": {
      "op": "intc_2 // 48"
    },
    "913": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "914": {
      "op": "pushint 40 // 40"
    },
    "916": {
      "op": "extract_uint64"
    },
    "917": {
      "op": "uncover 2"
    },
    "919": {
      "op": "+"
    },
    "920": {
      "op": "uncover 2"
    },
    "922": {
      "op": "bytec_0 // \"deposited\""
    },
    "923": {
      "op": "uncover 2"
    },
    "925": {
      "op": "app_local_put"
    },
    "926": {
      "op": "frame_dig -2"
    },
    "928": {
      "op": "frame_dig -1"
    },
    "930": {
      "op": "concat"
    },
    "931": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "932": {
      "op": "txn Sender"
    },
    "934": {
      "op": "concat"
    },
    "935": {
      "op": "dup"
    },
    "936": {
      "op": "box_get"
    },
    "937": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists"
    },
    "938": {
      "op": "dup"
    },
    "939": {
      "op": "intc_0 // 0"
    },
    "940": {
      "op": "extract_uint16"
    },
    "941": {
      "op": "uncover 5"
    },
    "943": {
      "op": ">"
    },
    "944": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "945": {
      "op": "uncover 3"
    },
    "947": {
      "op": "pushint 2 // 2"
    },
    "949": {
      "op": "+"
    },
    "950": {
      "op": "uncover 3"
    },
    "952": {
      "op": "replace3"
    },
    "953": {
      "op": "dig 1"
    },
    "955": {
      "op": "box_del"
    },
    "956": {
      "op": "pop"
    },
    "957": {
      "op": "box_put"
    },
    "958": {
      "retsub": true,
      "op": "retsub"
    },
    "959": {
      "block": "bid_else_body@6",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "bytec_1 // \"placed_bids\""
    },
    "960": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "tmp%28#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "\"placed_bids\"",
        "tmp%28#0"
      ]
    },
    "962": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0"
      ]
    },
    "963": {
      "op": "dup",
      "defined_out": [
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "964": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "965": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "maybe_value%9#0"
      ]
    },
    "966": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "969": {
      "op": "frame_dig -2",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "sale_key#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "expr_value_trimmed%1#0",
        "sale_key#0 (copy)"
      ]
    },
    "971": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "new_bid_amount#0 (copy)",
        "sale_key#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "expr_value_trimmed%1#0",
        "sale_key#0 (copy)",
        "new_bid_amount#0 (copy)"
      ]
    },
    "973": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "expr_value_trimmed%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "expr_value_trimmed%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "974": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0"
      ]
    },
    "975": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "976": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "977": {
      "op": "intc_2 // 48",
      "defined_out": [
        "48",
        "byte_len%1#0",
        "concatenated%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "48"
      ]
    },
    "978": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "979": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "980": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "984": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concat_result%1#0"
      ]
    },
    "985": {
      "op": "dig 1",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concat_result%1#0",
        "tmp%29#0 (copy)"
      ]
    },
    "987": {
      "op": "box_del",
      "defined_out": [
        "concat_result%1#0",
        "tmp%29#0",
        "{box_del}"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concat_result%1#0",
        "{box_del}"
      ]
    },
    "988": {
      "op": "pop",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%29#0",
        "concat_result%1#0"
      ]
    },
    "989": {
      "op": "box_put",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "990": {
      "retsub": true,
      "op": "retsub"
    },
    "991": {
      "block": "bid_after_if_else@16",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "i#0"
      ]
    },
    "993": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "i#0",
        "1"
      ]
    },
    "994": {
      "op": "+",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "i#0"
      ]
    },
    "995": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "997": {
      "op": "b bid_for_header@13"
    },
    "1000": {
      "block": "bid_after_for@17",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "smart_contracts.digital_marketplace.subroutines.find_placed_bid%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "smart_contracts.digital_marketplace.subroutines.find_placed_bid%0#0"
      ]
    },
    "1001": {
      "op": "dup",
      "defined_out": [
        "index#0",
        "smart_contracts.digital_marketplace.subroutines.find_placed_bid%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "smart_contracts.digital_marketplace.subroutines.find_placed_bid%0#0",
        "index#0"
      ]
    },
    "1002": {
      "op": "frame_bury 2",
      "defined_out": [
        "found#0",
        "index#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "found#0"
      ]
    },
    "1004": {
      "op": "b bid_after_inlined_smart_contracts.digital_marketplace.subroutines.find_placed_bid@18"
    },
    "1007": {
      "block": "bid_else_body@8",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ],
      "op": "txn Sender"
    },
    "1009": {
      "op": "dup"
    },
    "1010": {
      "op": "intc_0 // 0"
    },
    "1011": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "tmp%30#0 (copy)",
        "0",
        "\"deposited\""
      ]
    },
    "1012": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "1013": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "maybe_value%10#0"
      ]
    },
    "1014": {
      "op": "intc 4 // 13135300",
      "defined_out": [
        "13135300",
        "maybe_value%10#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "maybe_value%10#0",
        "13135300"
      ]
    },
    "1016": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "new_state_value%2#0"
      ]
    },
    "1017": {
      "op": "bytec_0 // \"deposited\""
    },
    "1018": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%30#0",
        "\"deposited\"",
        "new_state_value%2#0"
      ]
    },
    "1019": {
      "op": "app_local_put",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "1020": {
      "op": "frame_dig -2",
      "defined_out": [
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "sale_key#0 (copy)"
      ]
    },
    "1022": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_bid_amount#0 (copy)",
        "sale_key#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "sale_key#0 (copy)",
        "new_bid_amount#0 (copy)"
      ]
    },
    "1024": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1025": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "encoded_tuple_buffer%14#0",
        "0x0001"
      ]
    },
    "1029": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "0x0001",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1030": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0"
      ]
    },
    "1031": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "1032": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "array_data%0#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0",
        "\"placed_bids\"",
        "tmp%32#0"
      ]
    },
    "1034": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0",
        "tmp%33#0"
      ]
    },
    "1035": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ]
    },
    "1036": {
      "op": "box_del",
      "defined_out": [
        "array_data%0#0",
        "tmp%33#0",
        "{box_del}"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0",
        "tmp%33#0",
        "{box_del}"
      ]
    },
    "1037": {
      "op": "pop",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "array_data%0#0",
        "tmp%33#0"
      ]
    },
    "1038": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%33#0",
        "array_data%0#0"
      ]
    },
    "1039": {
      "op": "box_put",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "1040": {
      "retsub": true,
      "op": "retsub"
    },
    "1041": {
      "block": "bid_else_body@2",
      "stack_in": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1042": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1043": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1044": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "1045": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "16"
      ]
    },
    "1046": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0"
      ]
    },
    "1047": {
      "op": "dig 1",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "1049": {
      "op": "len",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "1050": {
      "op": "dig 2",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "1052": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "item_start_offset%2#0 (copy)",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "maybe_value%2#0 (copy)",
        "item_start_offset%2#0 (copy)"
      ]
    },
    "1054": {
      "op": "uncover 2",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "maybe_value%2#0 (copy)",
        "item_start_offset%2#0 (copy)",
        "item_end_offset%2#0"
      ]
    },
    "1056": {
      "op": "substring3",
      "defined_out": [
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "tmp%12#0"
      ]
    },
    "1057": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1060": {
      "op": "txn Sender",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "expr_value_trimmed%0#0",
        "tmp%13#0"
      ]
    },
    "1062": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "new_bid_amount#0 (copy)",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "expr_value_trimmed%0#0",
        "tmp%13#0",
        "new_bid_amount#0 (copy)"
      ]
    },
    "1064": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "expr_value_trimmed%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "expr_value_trimmed%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1065": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0"
      ]
    },
    "1066": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1067": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1068": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "byte_len%0#0",
        "concatenated%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "40"
      ]
    },
    "1070": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%2#0",
        "len_%0#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1071": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1072": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "item_start_offset%2#0",
        "len_16_bit%0#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1075": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1076": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "item_start_offset%2#0",
        "concat_result%0#0"
      ]
    },
    "1077": {
      "op": "uncover 2",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "concat_result%0#0",
        "maybe_value%2#0"
      ]
    },
    "1079": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat_result%0#0",
        "item_start_offset%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "concat_result%0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1080": {
      "op": "uncover 3",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "concat_result%0#0",
        "maybe_value%2#0",
        "0",
        "item_start_offset%2#0"
      ]
    },
    "1082": {
      "op": "extract3",
      "defined_out": [
        "concat_result%0#0",
        "data_up_to_item%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "concat_result%0#0",
        "data_up_to_item%1#0"
      ]
    },
    "1083": {
      "op": "swap",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "data_up_to_item%1#0",
        "concat_result%0#0"
      ]
    },
    "1084": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "updated_data%1#0"
      ]
    },
    "1085": {
      "op": "dig 1",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "updated_data%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1087": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "updated_data%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "updated_data%1#0",
        "{box_del}"
      ]
    },
    "1088": {
      "op": "pop",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0",
        "tmp%0#0",
        "updated_data%1#0"
      ]
    },
    "1089": {
      "op": "box_put",
      "stack_out": [
        "placed_bids#0",
        "i#0",
        "index#0",
        "tmp%0#1",
        "maybe_best_bid#0"
      ]
    },
    "1090": {
      "op": "b bid_after_if_else@3"
    },
    "1093": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.claim_unencumbered_bids",
      "params": {},
      "block": "claim_unencumbered_bids",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1096": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1097": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1098": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "1100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1101": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%0#0",
        "0",
        "\"deposited\""
      ]
    },
    "1102": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "1104": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1106": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "state_get%0#0"
      ]
    },
    "1107": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "state_get%0#0",
        "tmp%1#0"
      ]
    },
    "1109": {
      "op": "bytec_0 // \"deposited\"",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "state_get%0#0",
        "tmp%1#0",
        "\"deposited\""
      ]
    },
    "1110": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%1#0",
        "\"deposited\"",
        "state_get%0#0"
      ]
    },
    "1112": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1113": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "1114": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "\"placed_bids\"",
        "tmp%2#0"
      ]
    },
    "1116": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "1117": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "placed_bids#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "maybe_exists%1#0"
      ]
    },
    "1118": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_exists%1#0",
        "placed_bids#0"
      ]
    },
    "1119": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "maybe_exists%1#0",
        "placed_bids#0",
        "placed_bids#0 (copy)"
      ]
    },
    "1120": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "placed_bids#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "maybe_exists%1#0"
      ]
    },
    "1122": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0"
      ]
    },
    "1123": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "1124": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "placed_bids#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "\"placed_bids\"",
        "tmp%4#0"
      ]
    },
    "1126": {
      "op": "concat",
      "defined_out": [
        "placed_bids#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "tmp%5#0"
      ]
    },
    "1127": {
      "op": "dup",
      "defined_out": [
        "placed_bids#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1128": {
      "op": "box_del",
      "defined_out": [
        "placed_bids#0",
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "1129": {
      "op": "pop",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "tmp%5#0"
      ]
    },
    "1130": {
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000",
        "placed_bids#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "tmp%5#0",
        "0x0000"
      ]
    },
    "1131": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0"
      ]
    },
    "1132": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "placed_bids#0",
        "0"
      ]
    },
    "1133": {
      "op": "extract_uint16",
      "defined_out": [
        "placed_bids#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0"
      ]
    },
    "1134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "placed_bids#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1135": {
      "block": "claim_unencumbered_bids_for_header@1",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "i#0"
      ]
    },
    "1137": {
      "op": "frame_dig 3",
      "defined_out": [
        "i#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1139": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1140": {
      "op": "bz claim_unencumbered_bids_after_for@9",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1143": {
      "op": "frame_dig 2"
    },
    "1145": {
      "op": "extract 2 0"
    },
    "1148": {
      "op": "frame_dig 4"
    },
    "1150": {
      "op": "intc_2 // 48"
    },
    "1151": {
      "op": "*"
    },
    "1152": {
      "op": "intc_2 // 48"
    },
    "1153": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "1154": {
      "op": "dup"
    },
    "1155": {
      "op": "frame_bury 0"
    },
    "1157": {
      "error": "Index access is out of bounds",
      "op": "extract 0 40 // on error: Index access is out of bounds"
    },
    "1160": {
      "op": "bytec_2 // \"sales\""
    },
    "1161": {
      "op": "swap"
    },
    "1162": {
      "op": "concat"
    },
    "1163": {
      "op": "dup"
    },
    "1164": {
      "op": "frame_bury 1"
    },
    "1166": {
      "op": "box_get"
    },
    "1167": {
      "op": "bury 1"
    },
    "1169": {
      "op": "bz claim_unencumbered_bids_if_body@5"
    },
    "1172": {
      "op": "frame_dig 1"
    },
    "1174": {
      "op": "box_get"
    },
    "1175": {
      "op": "pop"
    },
    "1176": {
      "op": "dup"
    },
    "1177": {
      "op": "intc_3 // 16"
    },
    "1178": {
      "op": "extract_uint16"
    },
    "1179": {
      "op": "dig 1"
    },
    "1181": {
      "op": "len"
    },
    "1182": {
      "op": "substring3"
    },
    "1183": {
      "op": "bytec_3 // 0x0000"
    },
    "1184": {
      "op": "=="
    },
    "1185": {
      "op": "bnz claim_unencumbered_bids_if_body@5"
    },
    "1188": {
      "op": "frame_dig 1"
    },
    "1190": {
      "op": "box_get"
    },
    "1191": {
      "op": "pop"
    },
    "1192": {
      "op": "dup"
    },
    "1193": {
      "op": "intc_3 // 16"
    },
    "1194": {
      "op": "extract_uint16"
    },
    "1195": {
      "op": "dig 1"
    },
    "1197": {
      "op": "len"
    },
    "1198": {
      "op": "substring3"
    },
    "1199": {
      "op": "extract 2 40"
    },
    "1202": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds"
    },
    "1205": {
      "op": "txn Sender"
    },
    "1207": {
      "op": "=="
    },
    "1208": {
      "op": "bnz claim_unencumbered_bids_else_body@6"
    },
    "1211": {
      "block": "claim_unencumbered_bids_if_body@5",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%22#0"
      ]
    },
    "1213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%22#0",
        "0"
      ]
    },
    "1214": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%22#0",
        "0",
        "\"deposited\""
      ]
    },
    "1215": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "maybe_value%5#0",
        "maybe_exists%5#0",
        "0"
      ]
    },
    "1217": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1219": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "state_get%1#0"
      ]
    },
    "1220": {
      "op": "frame_dig 0",
      "defined_out": [
        "state_get%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "state_get%1#0",
        "tmp%7#0"
      ]
    },
    "1222": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "state_get%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "state_get%1#0",
        "tmp%7#0",
        "40"
      ]
    },
    "1224": {
      "op": "extract_uint64",
      "defined_out": [
        "state_get%1#0",
        "tmp%25#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "state_get%1#0",
        "tmp%25#0"
      ]
    },
    "1225": {
      "op": "txn Sender",
      "defined_out": [
        "state_get%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "state_get%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "1227": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%26#0",
        "state_get%1#0",
        "tmp%25#0"
      ]
    },
    "1229": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%26#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%26#0",
        "new_state_value%0#0"
      ]
    },
    "1230": {
      "op": "bytec_0 // \"deposited\""
    },
    "1231": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%26#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "1232": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1233": {
      "block": "claim_unencumbered_bids_after_if_else@7",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "i#0"
      ]
    },
    "1235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1236": {
      "op": "+",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "i#0"
      ]
    },
    "1237": {
      "op": "frame_bury 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1239": {
      "op": "b claim_unencumbered_bids_for_header@1"
    },
    "1242": {
      "block": "claim_unencumbered_bids_else_body@6",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "op": "bytec_1 // \"placed_bids\""
    },
    "1243": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "\"placed_bids\"",
        "tmp%27#0"
      ]
    },
    "1245": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0"
      ]
    },
    "1246": {
      "op": "dup",
      "defined_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "1247": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1248": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "maybe_value%6#0"
      ]
    },
    "1249": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1252": {
      "op": "frame_dig 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "expr_value_trimmed%0#0",
        "tmp%7#0"
      ]
    },
    "1254": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0"
      ]
    },
    "1255": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1256": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1257": {
      "op": "intc_2 // 48",
      "defined_out": [
        "48",
        "byte_len%0#0",
        "concatenated%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "48"
      ]
    },
    "1258": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1259": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1260": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1263": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1264": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%28#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concat_result%0#0"
      ]
    },
    "1265": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concat_result%0#0",
        "tmp%28#0 (copy)"
      ]
    },
    "1267": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "tmp%28#0",
        "tmp%7#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concat_result%0#0",
        "{box_del}"
      ]
    },
    "1268": {
      "op": "pop",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%28#0",
        "concat_result%0#0"
      ]
    },
    "1269": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1270": {
      "op": "b claim_unencumbered_bids_after_if_else@7"
    },
    "1273": {
      "block": "claim_unencumbered_bids_after_for@9",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "op": "bytec_1 // \"placed_bids\""
    },
    "1274": {
      "op": "txn Sender",
      "defined_out": [
        "\"placed_bids\"",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "\"placed_bids\"",
        "tmp%30#0"
      ]
    },
    "1276": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%31#0"
      ]
    },
    "1277": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1278": {
      "error": "check self.placed_bids entry exists",
      "op": "assert // check self.placed_bids entry exists",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "maybe_value%7#0"
      ]
    },
    "1279": {
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "maybe_value%7#0",
        "0x0000"
      ]
    },
    "1280": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0",
        "tmp%32#0"
      ]
    },
    "1281": {
      "op": "bz claim_unencumbered_bids_after_if_else@11",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ]
    },
    "1284": {
      "op": "txn Sender"
    },
    "1286": {
      "op": "dup"
    },
    "1287": {
      "op": "intc_0 // 0"
    },
    "1288": {
      "op": "bytec_0 // \"deposited\""
    },
    "1289": {
      "op": "app_local_get_ex"
    },
    "1290": {
      "error": "check self.deposited exists for account",
      "op": "assert // check self.deposited exists for account"
    },
    "1291": {
      "op": "intc 4 // 13135300"
    },
    "1293": {
      "op": "+"
    },
    "1294": {
      "op": "bytec_0 // \"deposited\""
    },
    "1295": {
      "op": "swap"
    },
    "1296": {
      "op": "app_local_put"
    },
    "1297": {
      "op": "bytec_1 // \"placed_bids\""
    },
    "1298": {
      "op": "txn Sender"
    },
    "1300": {
      "op": "concat"
    },
    "1301": {
      "op": "box_del"
    },
    "1302": {
      "op": "pop"
    },
    "1303": {
      "block": "claim_unencumbered_bids_after_if_else@11",
      "stack_in": [
        "tmp%7#0",
        "tmp%9#0",
        "placed_bids#0",
        "tmp%6#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1304": {
      "subroutine": "smart_contracts.digital_marketplace.contract.DigitalMarketplace.accept_bid",
      "params": {
        "asset#0": "bytes"
      },
      "block": "accept_bid",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1307": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1309": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "1311": {
      "op": "concat",
      "defined_out": [
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0"
      ]
    },
    "1312": {
      "op": "bytec_2 // \"sales\"",
      "defined_out": [
        "\"sales\"",
        "sale_key#0"
      ],
      "stack_out": [
        "sale_key#0",
        "\"sales\""
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "\"sales\"",
        "sale_key#0"
      ]
    },
    "1314": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1315": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1316": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "maybe_exists%0#0"
      ]
    },
    "1317": {
      "error": "check self.sales entry exists",
      "op": "assert // check self.sales entry exists",
      "stack_out": [
        "tmp%1#0",
        "sale#0"
      ]
    },
    "1318": {
      "op": "dup",
      "defined_out": [
        "sale#0",
        "sale#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "sale#0 (copy)"
      ]
    },
    "1319": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "sale#0",
        "sale#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "sale#0 (copy)",
        "16"
      ]
    },
    "1320": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "item_start_offset%0#0"
      ]
    },
    "1321": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "item_start_offset%0#0",
        "sale#0 (copy)"
      ]
    },
    "1323": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1324": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "sale#0 (copy)"
      ]
    },
    "1326": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "sale#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1328": {
      "op": "substring3",
      "defined_out": [
        "sale#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "tmp%2#0"
      ]
    },
    "1329": {
      "op": "extract 2 40",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0"
      ]
    },
    "1332": {
      "op": "txn Sender",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%4#0"
      ]
    },
    "1334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1335": {
      "op": "bytec_0 // \"deposited\"",
      "defined_out": [
        "\"deposited\"",
        "0",
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%4#0",
        "0",
        "\"deposited\""
      ]
    },
    "1336": {
      "op": "app_local_get_ex",
      "defined_out": [
        "current_best_bid#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0"
      ]
    },
    "1338": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1340": {
      "op": "select",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "state_get%0#0"
      ]
    },
    "1341": {
      "op": "dig 1",
      "defined_out": [
        "current_best_bid#0",
        "current_best_bid#0 (copy)",
        "sale#0",
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "state_get%0#0",
        "current_best_bid#0 (copy)"
      ]
    },
    "1343": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "current_best_bid#0",
        "current_best_bid#0 (copy)",
        "sale#0",
        "state_get%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "state_get%0#0",
        "current_best_bid#0 (copy)",
        "32"
      ]
    },
    "1345": {
      "op": "extract_uint64",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "state_get%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "state_get%0#0",
        "tmp%6#0"
      ]
    },
    "1346": {
      "op": "+",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%7#0"
      ]
    },
    "1347": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%7#0",
        "5"
      ]
    },
    "1349": {
      "callsub": "smart_contracts.digital_marketplace.subroutines.sales_box_mbr",
      "op": "callsub sales_box_mbr",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1352": {
      "op": "txn Sender",
      "defined_out": [
        "current_best_bid#0",
        "sale#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1354": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1356": {
      "op": "+",
      "defined_out": [
        "current_best_bid#0",
        "new_state_value%0#0",
        "sale#0",
        "tmp%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%10#0",
        "new_state_value%0#0"
      ]
    },
    "1357": {
      "op": "bytec_0 // \"deposited\""
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "tmp%10#0",
        "\"deposited\"",
        "new_state_value%0#0"
      ]
    },
    "1359": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0"
      ]
    },
    "1360": {
      "op": "itxn_begin"
    },
    "1361": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "asset#0 (copy)"
      ]
    },
    "1363": {
      "op": "btoi",
      "defined_out": [
        "current_best_bid#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "current_best_bid#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1364": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "current_best_bid#0"
      ]
    },
    "1365": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0",
        "sale#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "sale#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1368": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0",
        "sale#0"
      ]
    },
    "1370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0",
        "sale#0",
        "0"
      ]
    },
    "1371": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "1372": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1374": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1376": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1378": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "axfer"
      ]
    },
    "1380": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1383": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1385": {
      "op": "itxn_submit"
    },
    "1386": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1387": {
      "op": "pop",
      "stack_out": []
    },
    "1388": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
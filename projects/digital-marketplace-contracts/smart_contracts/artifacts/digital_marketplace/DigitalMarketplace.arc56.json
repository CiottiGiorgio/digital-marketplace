{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        316
                    ],
                    "errorMessage": "Already opted in"
                },
                {
                    "pc": [
                        235,
                        360,
                        492
                    ],
                    "errorMessage": "Different sender"
                },
                {
                    "pc": [
                        422,
                        508,
                        523
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        87,
                        130,
                        155
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        177
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut"
                },
                {
                    "pc": [
                        115,
                        195
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        428
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        243,
                        368,
                        500
                    ],
                    "errorMessage": "Wrong receiver"
                },
                {
                    "pc": [
                        222
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        90,
                        118,
                        133,
                        158,
                        180,
                        198
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        275,
                        323,
                        375,
                        530
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        461,
                        507,
                        548
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        143
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        103,
                        208
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEEA9TbAiYCCWRlcG9zaXRlZAVzYWxlczEbQQC1ggYENiXk6wQh8d3/BBMACpQEppIAZgR15IBjBCIXSnM2GgCOBgBrAFgARgAtABsAAiJDMRkURDEYRDYaATEWIwlJOBAjEkSIAXcjQyMxGZAlGkQxGEQ2GgGIASQjQzEZFEQxGEQxFiMJSTgQJBJENhoBiADII0MxGRREMRhENhoBF8AwiACII0MjMRmQgQUaRDEYRDYaAYgATyNDIzEZkCUaRDEYRDEWIwlJOBAjEkSIAA0jQzEZQP93MRgURCNDigEAi/84ADEAEkSL/zgHMgoSRDEAIihjIk4CTYv/OAgxAE4CCChMZomKAQAxAEkiKGNEi/8XTEsBCU8CKE8CZrExALIHsggjshAisgGziYoBADIKi/9wAEUBFEQxAEkiKGNEMhAJKExmsTIKIrISshSL/7IRJLIQIrIBs4mKAgCL/jgAMQASRIv+OBQyChJEMQBJIihjRCEECShMZov+OBIWi/9QgAIAElCAAgAAUDEAi/44ERZQKUxQSbxITL+JigEAi/9XACAxABJEMQAiKGMiTgJNMQBMIQQIKExmsYv/gSBbMQApi/9QSb5EIluyEkyyFEyyESSyECKyAbO8SImKAgCL/zgAMQASRIv/OAcyChJEKYv+UEm+RFcICIv/OAhJFk8CqESL/lcAIEkiKGNETwIIKExmsYv+gSBbMQBLAr5EIluyErIUshEkshAisgGzvEiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
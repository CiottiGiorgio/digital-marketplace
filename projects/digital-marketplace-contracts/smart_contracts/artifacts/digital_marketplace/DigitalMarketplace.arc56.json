{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                },
                {
                    "type": "uint64",
                    "name": "new_bid_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                },
                "placed_bids": {
                    "keyType": "address",
                    "valueType": "((address,uint64),uint64)[]",
                    "prefix": "cGxhY2VkX2JpZHM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "Already opted in"
                },
                {
                    "pc": [
                        375
                    ],
                    "errorMessage": "Balance not empty"
                },
                {
                    "pc": [
                        323,
                        468
                    ],
                    "errorMessage": "Different sender"
                },
                {
                    "pc": [
                        619,
                        744,
                        823,
                        824,
                        868,
                        899,
                        1097,
                        1101,
                        1148
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        129,
                        147,
                        184,
                        210
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        232
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut"
                },
                {
                    "pc": [
                        117,
                        166,
                        251
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        717
                    ],
                    "errorMessage": "Worse bid"
                },
                {
                    "pc": [
                        331,
                        476
                    ],
                    "errorMessage": "Wrong receiver"
                },
                {
                    "pc": [
                        278
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        120,
                        132,
                        150,
                        169,
                        187,
                        213,
                        235,
                        254
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        370,
                        382,
                        430,
                        483,
                        597,
                        626,
                        768,
                        847,
                        968
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        797,
                        853,
                        892,
                        920,
                        1066,
                        1194
                    ],
                    "errorMessage": "check self.placed_bids entry exists"
                },
                {
                    "pc": [
                        543,
                        604,
                        630,
                        654,
                        688,
                        726,
                        1001
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        198
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        264
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEwCCYECWRlcG9zaXRlZAtwbGFjZWRfYmlkcwVzYWxlcwIAADEbQQDhgggENiXk6wQh8d3/BBMACpQEppIAZgQJVEgQBNSaxg4EoY8f/ARFbjl1NhoAjggAiAB1AGMASQAzACQAEgACIkMjMRmQgQMaRDEYRIgDoCNDMRkURDEYRDYaATYaAogCFCNDMRkURDEYRDYaAYgBryNDIzEZkIEDGkQxGEQ2GgEXwDCIAVojQzEZFEQxGEQxFiMJSTgQgQQSRDYaAYgA/SNDMRkURDEYRDYaARfAMIgAvCNDIzEZkIEFGkQxGEQ2GgGIAHAjQyMxGZCBAxpEMRhEMRYjCUk4ECMSRIgALSNDMRlA/1kxGBREI0OKAQGL/4EgCCUIgQIIJQglCIECCIEoCIGQAwuBxBMIiYoBAIv/OAAxABJEi/84BzIKEkQxACIoYyJOAk2L/zgIMQBOAggoTGaJigEAMRmBAhJBAAsxACIoY0SL/xcSRDEASSIoY0SL/xdMSwEJTwIoTwJmsTEAsgeyCCOyECKyAbOJigEAMgqL/3AARQEURDEASSIoY0QyEAkoTGaxMgoishKyFIv/shGBBLIQIrIBs4mKAgCL/jgAMQASRIv+OBQyChJEMQBJIihjRIEFiP8wCShMZov+OBIWi/9QgAIAElArUDEAi/44ERZQKkxQSbxITL+JigEAMQCL/xZQsTEAKk8CUEm+RCJbshJMshSL/7IRgQSyECKyAbMxACIoYyJOAk2BBYj+2DEATgIIKExmvEiJigEAMQBJIihjRCqL/1BJvkQlW08CTAlPAihPAmaL/1cAIEkiKGNESwK+RCVbgQWI/psICChMZrGL/4EgWzEASwK+RCJbshKyFLIRgQSyECKyAbO8SImKAgAigABHAiqL/lBJvkRJgRBZSwEVUklOAisTQQEmiwRXAiiBIFuL/xcMRDEAi/9QSwG+REmBEFlLARVLAksCTwJSSSJZRE8DXAJPAiJPA1hMUEsBvEi/MQBJIihjRIv/FwkoTGYpMQBQvkUBQQCwKTEAUL5MSU4CjABEIlmMAyKMAYsBiwMMQQCOiwBXAgCLASQLJFhXACiL/hJBAHEjiwGMAkEASTEASSIoY0QpMQBQvkRXAgCLAklOBCQLTEsBJFiBKFtPAghPAihPAmaL/ov/UCkxAFBJvkRJIllPBQ1ETwOBAghPA11LAbxIv4kpMQBQSb5EVwIAi/6L/1BQSRUkChZXBgJMUEsBvEi/iYsBIwiMAUL/aiJJjAJC/4QxAEkiKGNEgcTboQYJKExmi/6L/1CAAgABTFApMQBQSbxITL+JSb5ESYEQWUsBFUsCSwJPAlJXAgAxAIv/UFBJFYEoChZXBgJMUE8CIk8DWExQSwG8SL9C/t6KAAAiSSkxAFC+TElPAkQpMQBQSbxIK78iWSKLBIsDDEEAhIsCVwIAiwQkCyRYSYwAVwAoKkxQSYwBvkUBQQApiwG+SEmBEFlLARVSKxJAABiLAb5ISYEQWUsBFVJXAihXACAxABJAAB8xACIoYyJOAk2LAIEoWzEATgIIKExmiwQjCIwEQv+TKTEAUEm+RFcCAIsAUEkVJAoWVwYCTFBLAbxIv0L/2Ik=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ],
        "UnencumberedBidsReceipt": [
            {
                "name": "total_bids",
                "type": "uint64"
            },
            {
                "name": "unencumbered_bids",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                },
                {
                    "type": "uint64",
                    "name": "new_bid_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_and_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "UnencumberedBidsReceipt"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "accept_bid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                },
                "receipt_book": {
                    "keyType": "address",
                    "valueType": "((address,uint64),uint64)[]",
                    "prefix": "cmVjZWlwdF9ib29r"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        559
                    ],
                    "errorMessage": "Already opted in"
                },
                {
                    "pc": [
                        568
                    ],
                    "errorMessage": "Clawback ASA"
                },
                {
                    "pc": [
                        453,
                        613
                    ],
                    "errorMessage": "Different sender"
                },
                {
                    "pc": [
                        401,
                        402,
                        746,
                        855,
                        917,
                        999,
                        1022,
                        1164,
                        1207,
                        1277,
                        1410,
                        1498,
                        1570
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        151,
                        188,
                        206,
                        243,
                        269
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut"
                },
                {
                    "pc": [
                        136,
                        176,
                        225,
                        310
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        638
                    ],
                    "errorMessage": "Sale already exists"
                },
                {
                    "pc": [
                        859
                    ],
                    "errorMessage": "Seller cannot be bidder"
                },
                {
                    "pc": [
                        753
                    ],
                    "errorMessage": "Seller cannot be buyer"
                },
                {
                    "pc": [
                        896
                    ],
                    "errorMessage": "Worse bid"
                },
                {
                    "pc": [
                        461,
                        621
                    ],
                    "errorMessage": "Wrong receiver"
                },
                {
                    "pc": [
                        564
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        139,
                        154,
                        179,
                        191,
                        209,
                        228,
                        246,
                        272,
                        294,
                        313
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        498,
                        534,
                        575,
                        645,
                        760,
                        786,
                        977,
                        1041,
                        1085,
                        1320,
                        1357,
                        1677
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        958,
                        984,
                        1015,
                        1054,
                        1253,
                        1388,
                        1517
                    ],
                    "errorMessage": "check self.receipt_book entry exists"
                },
                {
                    "pc": [
                        694,
                        767,
                        790,
                        818,
                        868,
                        900,
                        1112,
                        1484
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        257
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        323
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}
{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        307
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        69,
                        84,
                        109
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        158
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        72,
                        87,
                        112,
                        134
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        221
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        320
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        144
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQAEJgIJZGVwb3NpdGVkBXNhbGVzMRtBAHmCBAQ2JeTrBBMACpQEppIAZgR15IBjNhoAjgQAPAAqABEAAiNDMRkURDEYRDYaAYgA3yJDMRkURDEYRDEWIglJOBAkEkQ2GgGIAJAiQzEZFEQxGEQ2GgEXwDCIAFAiQyIxGZCBAxpEMRhEMRYiCUk4ECISRIgADSJDMRlA/6UxGBREIkOKAQCL/zgAMQASRIv/OAcyChJEMQAjKGMjTgJNi/84CDEATgIIKExmiYoBADIKi/9wAEUBFEQxAEkjKGNEMhAJKExmsTIKI7ISshSL/7IRJLIQI7IBs4mKAgCL/jgAMQASRIv+OBQyChJEi/44EhaL/1CAAgASUIACAABQMQCL/jgRFlApTFBJvEhMv4mKAQCL/1cAIDEAEkQpi/9QSb5EsYv/gSBbMQBPAiNbshKyFLIRJLIQI7IBs7xIiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
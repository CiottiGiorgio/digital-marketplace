{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ],
        "UnencumberedBidsReceipt": [
            {
                "name": "total_bids",
                "type": "uint64"
            },
            {
                "name": "unencumbered_bids",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                },
                {
                    "type": "uint64",
                    "name": "new_bid_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_and_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "UnencumberedBidsReceipt"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "accept_bid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                },
                "receipt_book": {
                    "keyType": "address",
                    "valueType": "((address,uint64),uint64)[]",
                    "prefix": "cmVjZWlwdF9ib29r"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        491
                    ],
                    "errorMessage": "Already opted in"
                },
                {
                    "pc": [
                        500
                    ],
                    "errorMessage": "Clawback ASA"
                },
                {
                    "pc": [
                        385,
                        545
                    ],
                    "errorMessage": "Different sender"
                },
                {
                    "pc": [
                        678,
                        790,
                        852,
                        925,
                        926,
                        971,
                        994,
                        1152,
                        1195,
                        1265,
                        1398,
                        1513
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        151,
                        188,
                        206,
                        243,
                        269
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut"
                },
                {
                    "pc": [
                        136,
                        176,
                        225,
                        310
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        570
                    ],
                    "errorMessage": "Sale already exists"
                },
                {
                    "pc": [
                        794
                    ],
                    "errorMessage": "Seller cannot be bidder"
                },
                {
                    "pc": [
                        685
                    ],
                    "errorMessage": "Seller cannot be buyer"
                },
                {
                    "pc": [
                        831
                    ],
                    "errorMessage": "Worse bid"
                },
                {
                    "pc": [
                        393,
                        553
                    ],
                    "errorMessage": "Wrong receiver"
                },
                {
                    "pc": [
                        496
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        139,
                        154,
                        179,
                        191,
                        209,
                        228,
                        246,
                        272,
                        294,
                        313
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        430,
                        466,
                        507,
                        577,
                        692,
                        718,
                        949,
                        1013,
                        1073,
                        1308,
                        1345
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        899,
                        956,
                        987,
                        1026,
                        1241,
                        1376
                    ],
                    "errorMessage": "check self.receipt_book entry exists"
                },
                {
                    "pc": [
                        626,
                        699,
                        722,
                        750,
                        803,
                        835,
                        1100,
                        1465
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        257
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        323
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}
{
    "name": "DigitalMarketplace",
    "structs": {
        "Sale": [
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "cost",
                "type": "uint64"
            },
            {
                "name": "bid",
                "type": "(address,uint64)[]"
            }
        ],
        "SaleKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sponsor_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_sale",
            "args": [
                {
                    "type": "axfer",
                    "name": "asset_deposit"
                },
                {
                    "type": "uint64",
                    "name": "cost"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_sale",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "SaleKey",
                    "name": "sale_key"
                },
                {
                    "type": "uint64",
                    "name": "new_bid_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_unencumbered_bids",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "accept_bid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {
                "deposited": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVwb3NpdGVk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "sales": {
                    "keyType": "SaleKey",
                    "valueType": "Sale",
                    "prefix": "c2FsZXM="
                },
                "placed_bids": {
                    "keyType": "address",
                    "valueType": "((address,uint64),uint64)[]",
                    "prefix": "cGxhY2VkX2JpZHM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        462
                    ],
                    "errorMessage": "Already opted in"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "Clawback ASA"
                },
                {
                    "pc": [
                        356,
                        516
                    ],
                    "errorMessage": "Different sender"
                },
                {
                    "pc": [
                        674,
                        803,
                        890,
                        891,
                        936,
                        959,
                        1147,
                        1151,
                        1196,
                        1358
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        159,
                        177,
                        214,
                        240
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        262
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut"
                },
                {
                    "pc": [
                        128,
                        147,
                        196,
                        281
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, OptIn"
                },
                {
                    "pc": [
                        541
                    ],
                    "errorMessage": "Sale already exists"
                },
                {
                    "pc": [
                        782
                    ],
                    "errorMessage": "Worse bid"
                },
                {
                    "pc": [
                        364,
                        524
                    ],
                    "errorMessage": "Wrong receiver"
                },
                {
                    "pc": [
                        467
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        131,
                        150,
                        162,
                        180,
                        199,
                        217,
                        243,
                        265,
                        284
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        401,
                        437,
                        478,
                        548,
                        651,
                        681,
                        827,
                        914,
                        1022,
                        1283
                    ],
                    "errorMessage": "check self.deposited exists for account"
                },
                {
                    "pc": [
                        864,
                        921,
                        952,
                        977,
                        1123
                    ],
                    "errorMessage": "check self.placed_bids entry exists"
                },
                {
                    "pc": [
                        597,
                        658,
                        685,
                        710,
                        754,
                        786,
                        1047,
                        1310
                    ],
                    "errorMessage": "check self.sales entry exists"
                },
                {
                    "pc": [
                        228
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        294
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2UuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDQ4IDE2IDEzMTM1MzAwCiAgICBieXRlY2Jsb2NrICJkZXBvc2l0ZWQiICJzYWxlcyIgMHgwMDAwICJwbGFjZWRfYmlkcyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNAogICAgcHVzaGJ5dGVzcyAweDM2MjVlNGViIDB4MjFmMWRkZmYgMHgxMzAwMGE5NCAweGE2OTIwMDY2IDB4MDk1NDQ4MTAgMHhkNDlhYzYwZSAweGExOGYxZmZjIDB4NDU2ZTM5NzUgMHhmOGUwZWZhZiAvLyBtZXRob2QgImRlcG9zaXQocGF5KXZvaWQiLCBtZXRob2QgIndpdGhkcmF3KHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJzcG9uc29yX2Fzc2V0KGFzc2V0KXZvaWQiLCBtZXRob2QgIm9wZW5fc2FsZShheGZlcix1aW50NjQpdm9pZCIsIG1ldGhvZCAiY2xvc2Vfc2FsZShhc3NldCl2b2lkIiwgbWV0aG9kICJidXkoKGFkZHJlc3MsdWludDY0KSl2b2lkIiwgbWV0aG9kICJiaWQoKGFkZHJlc3MsdWludDY0KSx1aW50NjQpdm9pZCIsIG1ldGhvZCAiY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHMoKXZvaWQiLCBtZXRob2QgImFjY2VwdF9iaWQodWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2RlcG9zaXRfcm91dGVANSBtYWluX3dpdGhkcmF3X3JvdXRlQDYgbWFpbl9zcG9uc29yX2Fzc2V0X3JvdXRlQDcgbWFpbl9vcGVuX3NhbGVfcm91dGVAOCBtYWluX2Nsb3NlX3NhbGVfcm91dGVAOSBtYWluX2J1eV9yb3V0ZUAxMCBtYWluX2JpZF9yb3V0ZUAxMSBtYWluX2NsYWltX3VuZW5jdW1iZXJlZF9iaWRzX3JvdXRlQDEyIG1haW5fYWNjZXB0X2JpZF9yb3V0ZUAxMwoKbWFpbl9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NTEKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9hY2NlcHRfYmlkX3JvdXRlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjA4CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBpbnRjXzEgLy8gMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBwdXNoaW50IDMgLy8gMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3Qgb25lIG9mIE5vT3AsIE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwOAogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCIsICJPcHRJbiJdKQogICAgY2FsbHN1YiBhY2NlcHRfYmlkCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NsYWltX3VuZW5jdW1iZXJlZF9iaWRzX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTgxCiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBpbnRjXzEgLy8gMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBwdXNoaW50IDMgLy8gMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3Qgb25lIG9mIE5vT3AsIE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmlkX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQ2CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE0NgogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBiaWQKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYnV5X3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTMxCiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzMQogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBidXkKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY2xvc2Vfc2FsZV9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTE1CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBpbnRjXzEgLy8gMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBwdXNoaW50IDMgLy8gMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3Qgb25lIG9mIE5vT3AsIE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTE1CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBjYWxsc3ViIGNsb3NlX3NhbGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fb3Blbl9zYWxlX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5NQogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1MQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGF4ZmVyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5NQogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBvcGVuX3NhbGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc3BvbnNvcl9hc3NldF9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODAKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NTEKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo4MAogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBzcG9uc29yX2Fzc2V0CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2OQogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCIsICJDbG9zZU91dCJdKQogICAgaW50Y18xIC8vIDEKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHNobAogICAgcHVzaGludCA1IC8vIDUKICAgICYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IG9uZSBvZiBOb09wLCBDbG9zZU91dAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1MQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2OQogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCIsICJDbG9zZU91dCJdKQogICAgY2FsbHN1YiB3aXRoZHJhdwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZXBvc2l0X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1OAogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCIsICJPcHRJbiJdKQogICAgaW50Y18xIC8vIDEKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHNobAogICAgcHVzaGludCAzIC8vIDMKICAgICYKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IG9uZSBvZiBOb09wLCBPcHRJbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo1MQogICAgLy8gY2xhc3MgRGlnaXRhbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU4CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBjYWxsc3ViIGRlcG9zaXQKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NTEKICAgIC8vIGNsYXNzIERpZ2l0YWxNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5zdWJyb3V0aW5lcy5zYWxlc19ib3hfbWJyKHByZWZpeF9sZW5ndGg6IHVpbnQ2NCkgLT4gdWludDY0OgpzYWxlc19ib3hfbWJyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6Ni03CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHNhbGVzX2JveF9tYnIocHJlZml4X2xlbmd0aDogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjEwLTEzCiAgICAvLyAjIERvbWFpbiBzZXBhcmF0b3IKICAgIC8vIHByZWZpeF9sZW5ndGggKwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weToxMi0xMwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgcHVzaGludCAzMiAvLyAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MTAtMTMKICAgIC8vICMgRG9tYWluIHNlcGFyYXRvcgogICAgLy8gcHJlZml4X2xlbmd0aCArCiAgICAvLyAjIFNhbGVLZXkKICAgIC8vIDMyICsgOCArCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weToxMi0xMwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgcHVzaGludCA4IC8vIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjEwLTEzCiAgICAvLyAjIERvbWFpbiBzZXBhcmF0b3IKICAgIC8vIHByZWZpeF9sZW5ndGggKwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MTQtMTcKICAgIC8vICMgU2FsZQogICAgLy8gIyBTaW5jZSB0aGUgU2FsZSB0eXBlIGNvbnRhaW5zIG9uZSBkeW5hbWljIHR5cGUsCiAgICAvLyAjICBpdCdzIGdvdCBhIDIgYnl0ZSBwcmVmaXggcG9pbnRpbmcgdG8gdGhhdCBkeW5hbWljIHR5cGUKICAgIC8vIDIgKwogICAgcHVzaGludCAyIC8vIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjEwLTE3CiAgICAvLyAjIERvbWFpbiBzZXBhcmF0b3IKICAgIC8vIHByZWZpeF9sZW5ndGggKwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgLy8gIyBTYWxlCiAgICAvLyAjIFNpbmNlIHRoZSBTYWxlIHR5cGUgY29udGFpbnMgb25lIGR5bmFtaWMgdHlwZSwKICAgIC8vICMgIGl0J3MgZ290IGEgMiBieXRlIHByZWZpeCBwb2ludGluZyB0byB0aGF0IGR5bmFtaWMgdHlwZQogICAgLy8gMiArCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weToxOC0xOQogICAgLy8gIyBhbW91bnQgJiBjb3N0IGZpZWxkcwogICAgLy8gOCArIDggKwogICAgcHVzaGludCA4IC8vIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjEwLTE5CiAgICAvLyAjIERvbWFpbiBzZXBhcmF0b3IKICAgIC8vIHByZWZpeF9sZW5ndGggKwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgLy8gIyBTYWxlCiAgICAvLyAjIFNpbmNlIHRoZSBTYWxlIHR5cGUgY29udGFpbnMgb25lIGR5bmFtaWMgdHlwZSwKICAgIC8vICMgIGl0J3MgZ290IGEgMiBieXRlIHByZWZpeCBwb2ludGluZyB0byB0aGF0IGR5bmFtaWMgdHlwZQogICAgLy8gMiArCiAgICAvLyAjIGFtb3VudCAmIGNvc3QgZmllbGRzCiAgICAvLyA4ICsgOCArCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weToxOC0xOQogICAgLy8gIyBhbW91bnQgJiBjb3N0IGZpZWxkcwogICAgLy8gOCArIDggKwogICAgcHVzaGludCA4IC8vIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjEwLTE5CiAgICAvLyAjIERvbWFpbiBzZXBhcmF0b3IKICAgIC8vIHByZWZpeF9sZW5ndGggKwogICAgLy8gIyBTYWxlS2V5CiAgICAvLyAzMiArIDggKwogICAgLy8gIyBTYWxlCiAgICAvLyAjIFNpbmNlIHRoZSBTYWxlIHR5cGUgY29udGFpbnMgb25lIGR5bmFtaWMgdHlwZSwKICAgIC8vICMgIGl0J3MgZ290IGEgMiBieXRlIHByZWZpeCBwb2ludGluZyB0byB0aGF0IGR5bmFtaWMgdHlwZQogICAgLy8gMiArCiAgICAvLyAjIGFtb3VudCAmIGNvc3QgZmllbGRzCiAgICAvLyA4ICsgOCArCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weToyMC0yMQogICAgLy8gIyBiaWQgZmllbGQgaXMgYSBkeW5hbWljIGFycmF5IGFuZCBzbyBpdCBoYXMgZ290IGEgbGVuZ3RoIHByZWZpeAogICAgLy8gMiArCiAgICBwdXNoaW50IDIgLy8gMgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MTAtMjEKICAgIC8vICMgRG9tYWluIHNlcGFyYXRvcgogICAgLy8gcHJlZml4X2xlbmd0aCArCiAgICAvLyAjIFNhbGVLZXkKICAgIC8vIDMyICsgOCArCiAgICAvLyAjIFNhbGUKICAgIC8vICMgU2luY2UgdGhlIFNhbGUgdHlwZSBjb250YWlucyBvbmUgZHluYW1pYyB0eXBlLAogICAgLy8gIyAgaXQncyBnb3QgYSAyIGJ5dGUgcHJlZml4IHBvaW50aW5nIHRvIHRoYXQgZHluYW1pYyB0eXBlCiAgICAvLyAyICsKICAgIC8vICMgYW1vdW50ICYgY29zdCBmaWVsZHMKICAgIC8vIDggKyA4ICsKICAgIC8vICMgYmlkIGZpZWxkIGlzIGEgZHluYW1pYyBhcnJheSBhbmQgc28gaXQgaGFzIGdvdCBhIGxlbmd0aCBwcmVmaXgKICAgIC8vIDIgKwogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MjItMjMKICAgIC8vICMgT25lIG9wdGlvbmFsIEJpZCB0eXBlCiAgICAvLyAoMzIgKyA4KQogICAgcHVzaGludCA0MCAvLyA0MAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MTAtMjMKICAgIC8vICMgRG9tYWluIHNlcGFyYXRvcgogICAgLy8gcHJlZml4X2xlbmd0aCArCiAgICAvLyAjIFNhbGVLZXkKICAgIC8vIDMyICsgOCArCiAgICAvLyAjIFNhbGUKICAgIC8vICMgU2luY2UgdGhlIFNhbGUgdHlwZSBjb250YWlucyBvbmUgZHluYW1pYyB0eXBlLAogICAgLy8gIyAgaXQncyBnb3QgYSAyIGJ5dGUgcHJlZml4IHBvaW50aW5nIHRvIHRoYXQgZHluYW1pYyB0eXBlCiAgICAvLyAyICsKICAgIC8vICMgYW1vdW50ICYgY29zdCBmaWVsZHMKICAgIC8vIDggKyA4ICsKICAgIC8vICMgYmlkIGZpZWxkIGlzIGEgZHluYW1pYyBhcnJheSBhbmQgc28gaXQgaGFzIGdvdCBhIGxlbmd0aCBwcmVmaXgKICAgIC8vIDIgKwogICAgLy8gIyBPbmUgb3B0aW9uYWwgQmlkIHR5cGUKICAgIC8vICgzMiArIDgpCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weTo4LTkKICAgIC8vICMgZm10OiBvZmYKICAgIC8vIHJldHVybiAyXzUwMCArIDQwMCAqICgKICAgIHB1c2hpbnQgNDAwIC8vIDQwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6OC0yNAogICAgLy8gIyBmbXQ6IG9mZgogICAgLy8gcmV0dXJuIDJfNTAwICsgNDAwICogKAogICAgLy8gICAgICMgRG9tYWluIHNlcGFyYXRvcgogICAgLy8gICAgIHByZWZpeF9sZW5ndGggKwogICAgLy8gICAgICMgU2FsZUtleQogICAgLy8gICAgIDMyICsgOCArCiAgICAvLyAgICAgIyBTYWxlCiAgICAvLyAgICAgIyBTaW5jZSB0aGUgU2FsZSB0eXBlIGNvbnRhaW5zIG9uZSBkeW5hbWljIHR5cGUsCiAgICAvLyAgICAgIyAgaXQncyBnb3QgYSAyIGJ5dGUgcHJlZml4IHBvaW50aW5nIHRvIHRoYXQgZHluYW1pYyB0eXBlCiAgICAvLyAgICAgMiArCiAgICAvLyAgICAgIyBhbW91bnQgJiBjb3N0IGZpZWxkcwogICAgLy8gICAgIDggKyA4ICsKICAgIC8vICAgICAjIGJpZCBmaWVsZCBpcyBhIGR5bmFtaWMgYXJyYXkgYW5kIHNvIGl0IGhhcyBnb3QgYSBsZW5ndGggcHJlZml4CiAgICAvLyAgICAgMiArCiAgICAvLyAgICAgIyBPbmUgb3B0aW9uYWwgQmlkIHR5cGUKICAgIC8vICAgICAoMzIgKyA4KQogICAgLy8gKQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6OC05CiAgICAvLyAjIGZtdDogb2ZmCiAgICAvLyByZXR1cm4gMl81MDAgKyA0MDAgKiAoCiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6OC0yNAogICAgLy8gIyBmbXQ6IG9mZgogICAgLy8gcmV0dXJuIDJfNTAwICsgNDAwICogKAogICAgLy8gICAgICMgRG9tYWluIHNlcGFyYXRvcgogICAgLy8gICAgIHByZWZpeF9sZW5ndGggKwogICAgLy8gICAgICMgU2FsZUtleQogICAgLy8gICAgIDMyICsgOCArCiAgICAvLyAgICAgIyBTYWxlCiAgICAvLyAgICAgIyBTaW5jZSB0aGUgU2FsZSB0eXBlIGNvbnRhaW5zIG9uZSBkeW5hbWljIHR5cGUsCiAgICAvLyAgICAgIyAgaXQncyBnb3QgYSAyIGJ5dGUgcHJlZml4IHBvaW50aW5nIHRvIHRoYXQgZHluYW1pYyB0eXBlCiAgICAvLyAgICAgMiArCiAgICAvLyAgICAgIyBhbW91bnQgJiBjb3N0IGZpZWxkcwogICAgLy8gICAgIDggKyA4ICsKICAgIC8vICAgICAjIGJpZCBmaWVsZCBpcyBhIGR5bmFtaWMgYXJyYXkgYW5kIHNvIGl0IGhhcyBnb3QgYSBsZW5ndGggcHJlZml4CiAgICAvLyAgICAgMiArCiAgICAvLyAgICAgIyBPbmUgb3B0aW9uYWwgQmlkIHR5cGUKICAgIC8vICAgICAoMzIgKyA4KQogICAgLy8gKQogICAgKwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmRlcG9zaXQocGF5bWVudDogdWludDY0KSAtPiB2b2lkOgpkZXBvc2l0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NTgtNTkKICAgIC8vIEBhYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIk5vT3AiLCAiT3B0SW4iXSkKICAgIC8vIGRlZiBkZXBvc2l0KHNlbGYsIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2MAogICAgLy8gYXNzZXJ0IHBheW1lbnQuc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5ESUZGRVJFTlRfU0VOREVSCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBEaWZmZXJlbnQgc2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo2MgogICAgLy8gcGF5bWVudC5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjYxLTYzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLldST05HX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gV3JvbmcgcmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBzZWxmLmRlcG9zaXRlZC5nZXQoVHhuLnNlbmRlciwgZGVmYXVsdD1VSW50NjQoMCkpICsgcGF5bWVudC5hbW91bnQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBpbnRjXzAgLy8gMAogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NjUKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NjYKICAgIC8vIHNlbGYuZGVwb3NpdGVkLmdldChUeG4uc2VuZGVyLCBkZWZhdWx0PVVJbnQ2NCgwKSkgKyBwYXltZW50LmFtb3VudAogICAgY292ZXIgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NjUKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NjUtNjcKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgLy8gICAgIHNlbGYuZGVwb3NpdGVkLmdldChUeG4uc2VuZGVyLCBkZWZhdWx0PVVJbnQ2NCgwKSkgKyBwYXltZW50LmFtb3VudAogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLndpdGhkcmF3KGFtb3VudDogYnl0ZXMpIC0+IHZvaWQ6CndpdGhkcmF3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NjktNzAKICAgIC8vIEBhYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIk5vT3AiLCAiQ2xvc2VPdXQiXSkKICAgIC8vIGRlZiB3aXRoZHJhdyhzZWxmLCBhbW91bnQ6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3MQogICAgLy8gaWYgVHhuLm9uX2NvbXBsZXRpb24gPT0gT25Db21wbGV0ZUFjdGlvbi5Ob09wOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IHdpdGhkcmF3X2Vsc2VfYm9keUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3MgogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gLT0gYW1vdW50Lm5hdGl2ZQogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVwb3NpdGVkIGV4aXN0cyBmb3IgYWNjb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBzd2FwCiAgICBkaWcgMQogICAgLQogICAgdW5jb3ZlciAyCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICB1bmNvdmVyIDIKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojc0CiAgICAvLyBpdHhuLlBheW1lbnQocmVjZWl2ZXI9VHhuLnNlbmRlciwgYW1vdW50PWFtb3VudC5uYXRpdmUpLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgp3aXRoZHJhd19lbHNlX2JvZHlAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojc2LTc4CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwgYW1vdW50PXNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo3NwogICAgLy8gcmVjZWl2ZXI9VHhuLnNlbmRlciwgYW1vdW50PXNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdCiAgICB0eG4gU2VuZGVyCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZXBvc2l0ZWQgZXhpc3RzIGZvciBhY2NvdW50CiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NzYKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6NzYtNzgKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1UeG4uc2VuZGVyLCBhbW91bnQ9c2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0KICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2Uuc3BvbnNvcl9hc3NldChhc3NldDogdWludDY0KSAtPiB2b2lkOgpzcG9uc29yX2Fzc2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODAtODEKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBzcG9uc29yX2Fzc2V0KHNlbGYsIGFzc2V0OiBBc3NldCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODIKICAgIC8vIGFzc2VydCBub3QgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5pc19vcHRlZF9pbigKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo4Mi04NAogICAgLy8gYXNzZXJ0IG5vdCBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmlzX29wdGVkX2luKAogICAgLy8gICAgIGFzc2V0CiAgICAvLyApLCBlcnIuQUxSRUFEWV9PUFRFRF9JTgogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIEFscmVhZHkgb3B0ZWQgaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBhc3NlcnQgYXNzZXQuY2xhd2JhY2sgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgZXJyLkNMQVdCQUNLX0FTQQogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q2xhd2JhY2sKICAgIGFzc2VydCAvLyBhc3NldCBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBDbGF3YmFjayBBU0EKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSAtPSBHbG9iYWwuYXNzZXRfb3B0X2luX21pbl9iYWxhbmNlCiAgICB0eG4gU2VuZGVyCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZXBvc2l0ZWQgZXhpc3RzIGZvciBhY2NvdW50CiAgICBnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKICAgIC0KICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIHN3YXAKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojg5LTkzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6OTEKICAgIC8vIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6OTIKICAgIC8vIGFzc2V0X2Ftb3VudD0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6ODkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo4OS05MwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2Uub3Blbl9zYWxlKGFzc2V0X2RlcG9zaXQ6IHVpbnQ2NCwgY29zdDogYnl0ZXMpIC0+IHZvaWQ6Cm9wZW5fc2FsZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5Ojk1LTk4CiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgb3Blbl9zYWxlKAogICAgLy8gICAgIHNlbGYsIGFzc2V0X2RlcG9zaXQ6IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uLCBjb3N0OiBhcmM0LlVJbnQ2NAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weTo5OQogICAgLy8gYXNzZXJ0IGFzc2V0X2RlcG9zaXQuc2VuZGVyID09IFR4bi5zZW5kZXIsIGVyci5ESUZGRVJFTlRfU0VOREVSCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBEaWZmZXJlbnQgc2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMDEKICAgIC8vIGFzc2V0X2RlcG9zaXQuYXNzZXRfcmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwMC0xMDIKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgYXNzZXRfZGVwb3NpdC5hc3NldF9yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuV1JPTkdfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBXcm9uZyByZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTA1CiAgICAvLyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksIGFyYzQuVUludDY0KGFzc2V0X2RlcG9zaXQueGZlcl9hc3NldC5pZCkKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMDQtMTA2CiAgICAvLyBzYWxlX2tleSA9IFNhbGVLZXkoCiAgICAvLyAgICAgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLCBhcmM0LlVJbnQ2NChhc3NldF9kZXBvc2l0LnhmZXJfYXNzZXQuaWQpCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwNwogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLnNhbGVzLm1heWJlKHNhbGVfa2V5KVsxXSwgZXJyLlNBTEVfQUxSRUFEWV9FWElTVFMKICAgIGJ5dGVjXzEgLy8gInNhbGVzIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIFNhbGUgYWxyZWFkeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwOQogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gLT0gc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVwb3NpdGVkIGV4aXN0cyBmb3IgYWNjb3VudAogICAgcHVzaGludCA1IC8vIDUKICAgIGNhbGxzdWIgc2FsZXNfYm94X21icgogICAgLQogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTEyCiAgICAvLyBhcmM0LlVJbnQ2NChhc3NldF9kZXBvc2l0LmFzc2V0X2Ftb3VudCksIGNvc3QsIGFyYzQuRHluYW1pY0FycmF5W0JpZF0oKQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldEFtb3VudAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTExLTExMwogICAgLy8gc2VsZi5zYWxlc1tzYWxlX2tleV0gPSBTYWxlKAogICAgLy8gICAgIGFyYzQuVUludDY0KGFzc2V0X2RlcG9zaXQuYXNzZXRfYW1vdW50KSwgY29zdCwgYXJjNC5EeW5hbWljQXJyYXlbQmlkXSgpCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAxMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTIKICAgIC8vIGFyYzQuVUludDY0KGFzc2V0X2RlcG9zaXQuYXNzZXRfYW1vdW50KSwgY29zdCwgYXJjNC5EeW5hbWljQXJyYXlbQmlkXSgpCiAgICBieXRlY18yIC8vIDB4MDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTExLTExMwogICAgLy8gc2VsZi5zYWxlc1tzYWxlX2tleV0gPSBTYWxlKAogICAgLy8gICAgIGFyYzQuVUludDY0KGFzc2V0X2RlcG9zaXQuYXNzZXRfYW1vdW50KSwgY29zdCwgYXJjNC5EeW5hbWljQXJyYXlbQmlkXSgpCiAgICAvLyApCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLmNvbnRyYWN0LkRpZ2l0YWxNYXJrZXRwbGFjZS5jbG9zZV9zYWxlKGFzc2V0OiB1aW50NjQpIC0+IHZvaWQ6CmNsb3NlX3NhbGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTUtMTE2CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICAvLyBkZWYgY2xvc2Vfc2FsZShzZWxmLCBhc3NldDogQXNzZXQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjExNwogICAgLy8gc2FsZV9rZXkgPSBTYWxlS2V5KGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwgYXJjNC5VSW50NjQoYXNzZXQuaWQpKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjExOS0xMjMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXNlbGYuc2FsZXNbc2FsZV9rZXldLmFtb3VudC5uYXRpdmUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjEKICAgIC8vIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjIKICAgIC8vIGFzc2V0X2Ftb3VudD1zZWxmLnNhbGVzW3NhbGVfa2V5XS5hbW91bnQubmF0aXZlLAogICAgYnl0ZWNfMSAvLyAic2FsZXMiCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zYWxlcyBlbnRyeSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgc3dhcAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMTktMTIzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1zZWxmLnNhbGVzW3NhbGVfa2V5XS5hbW91bnQubmF0aXZlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNgogICAgLy8gVHhuLnNlbmRlciwgZGVmYXVsdD1VSW50NjQoMCkKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNS0xMjcKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gc2VsZi5kZXBvc2l0ZWQuZ2V0KAogICAgLy8gICAgIFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApCiAgICAvLyApICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gPSBzZWxmLmRlcG9zaXRlZC5nZXQoCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjUtMTI3CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9IHNlbGYuZGVwb3NpdGVkLmdldCgKICAgIC8vICAgICBUeG4uc2VuZGVyLCBkZWZhdWx0PVVJbnQ2NCgwKQogICAgLy8gKSArIHNhbGVzX2JveF9tYnIoc2VsZi5zYWxlcy5rZXlfcHJlZml4Lmxlbmd0aCkKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNgogICAgLy8gVHhuLnNlbmRlciwgZGVmYXVsdD1VSW50NjQoMCkKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMjUtMTI3CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9IHNlbGYuZGVwb3NpdGVkLmdldCgKICAgIC8vICAgICBUeG4uc2VuZGVyLCBkZWZhdWx0PVVJbnQ2NCgwKQogICAgLy8gKSArIHNhbGVzX2JveF9tYnIoc2VsZi5zYWxlcy5rZXlfcHJlZml4Lmxlbmd0aCkKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTI3CiAgICAvLyApICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgcHVzaGludCA1IC8vIDUKICAgIGNhbGxzdWIgc2FsZXNfYm94X21icgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTI1CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9IHNlbGYuZGVwb3NpdGVkLmdldCgKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNS0xMjcKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gc2VsZi5kZXBvc2l0ZWQuZ2V0KAogICAgLy8gICAgIFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApCiAgICAvLyApICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgY292ZXIgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTI1CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9IHNlbGYuZGVwb3NpdGVkLmdldCgKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEyNS0xMjcKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gc2VsZi5kZXBvc2l0ZWQuZ2V0KAogICAgLy8gICAgIFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApCiAgICAvLyApICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTI5CiAgICAvLyBkZWwgc2VsZi5zYWxlc1tzYWxlX2tleV0KICAgIGJveF9kZWwKICAgIHBvcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmJ1eShzYWxlX2tleTogYnl0ZXMpIC0+IHZvaWQ6CmJ1eToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzMS0xMzIKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBidXkoc2VsZiwgc2FsZV9rZXk6IFNhbGVLZXkpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzMwogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gLT0gc2VsZi5zYWxlc1tzYWxlX2tleV0uY29zdC5uYXRpdmUKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlcG9zaXRlZCBleGlzdHMgZm9yIGFjY291bnQKICAgIGJ5dGVjXzEgLy8gInNhbGVzIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2FsZXMgZW50cnkgZXhpc3RzCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgLQogICAgdW5jb3ZlciAyCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICB1bmNvdmVyIDIKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNAogICAgLy8gc2VsZi5kZXBvc2l0ZWRbc2FsZV9rZXkub3duZXIubmF0aXZlXSArPSBzZWxmLnNhbGVzWwogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZXBvc2l0ZWQgZXhpc3RzIGZvciBhY2NvdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMzQtMTM2CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtzYWxlX2tleS5vd25lci5uYXRpdmVdICs9IHNlbGYuc2FsZXNbCiAgICAvLyAgICAgc2FsZV9rZXkKICAgIC8vIF0uY29zdC5uYXRpdmUgKyBzYWxlc19ib3hfbWJyKHNlbGYuc2FsZXMua2V5X3ByZWZpeC5sZW5ndGgpCiAgICBkaWcgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2FsZXMgZW50cnkgZXhpc3RzCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNgogICAgLy8gXS5jb3N0Lm5hdGl2ZSArIHNhbGVzX2JveF9tYnIoc2VsZi5zYWxlcy5rZXlfcHJlZml4Lmxlbmd0aCkKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBjYWxsc3ViIHNhbGVzX2JveF9tYnIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNC0xMzYKICAgIC8vIHNlbGYuZGVwb3NpdGVkW3NhbGVfa2V5Lm93bmVyLm5hdGl2ZV0gKz0gc2VsZi5zYWxlc1sKICAgIC8vICAgICBzYWxlX2tleQogICAgLy8gXS5jb3N0Lm5hdGl2ZSArIHNhbGVzX2JveF9tYnIoc2VsZi5zYWxlcy5rZXlfcHJlZml4Lmxlbmd0aCkKICAgICsKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzNAogICAgLy8gc2VsZi5kZXBvc2l0ZWRbc2FsZV9rZXkub3duZXIubmF0aXZlXSArPSBzZWxmLnNhbGVzWwogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTM0LTEzNgogICAgLy8gc2VsZi5kZXBvc2l0ZWRbc2FsZV9rZXkub3duZXIubmF0aXZlXSArPSBzZWxmLnNhbGVzWwogICAgLy8gICAgIHNhbGVfa2V5CiAgICAvLyBdLmNvc3QubmF0aXZlICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTM4LTE0MgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9c2FsZV9rZXkuYXNzZXQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXNlbGYuc2FsZXNbc2FsZV9rZXldLmFtb3VudC5uYXRpdmUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxMzkKICAgIC8vIHhmZXJfYXNzZXQ9c2FsZV9rZXkuYXNzZXQubmF0aXZlLAogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQwCiAgICAvLyBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQxCiAgICAvLyBhc3NldF9hbW91bnQ9c2VsZi5zYWxlc1tzYWxlX2tleV0uYW1vdW50Lm5hdGl2ZSwKICAgIGRpZyAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zYWxlcyBlbnRyeSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTM4CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTM4LTE0MgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9c2FsZV9rZXkuYXNzZXQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXNlbGYuc2FsZXNbc2FsZV9rZXldLmFtb3VudC5uYXRpdmUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQ0CiAgICAvLyBkZWwgc2VsZi5zYWxlc1tzYWxlX2tleV0KICAgIGJveF9kZWwKICAgIHBvcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2UuY29udHJhY3QuRGlnaXRhbE1hcmtldHBsYWNlLmJpZChzYWxlX2tleTogYnl0ZXMsIG5ld19iaWRfYW1vdW50OiBieXRlcykgLT4gdm9pZDoKYmlkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQ2LTE0NwogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGJpZChzZWxmLCBzYWxlX2tleTogU2FsZUtleSwgbmV3X2JpZF9hbW91bnQ6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAyCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTQ4CiAgICAvLyBhcmM0X3NlbmRlciA9IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNDkKICAgIC8vIG5ld19iaWQgPSBCaWQoYmlkZGVyPWFyYzRfc2VuZGVyLCBhbW91bnQ9bmV3X2JpZF9hbW91bnQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTUxCiAgICAvLyBtYXliZV9iZXN0X2JpZCA9IHNlbGYuc2FsZXNbc2FsZV9rZXldLmJpZC5jb3B5KCkKICAgIGJ5dGVjXzEgLy8gInNhbGVzIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgY292ZXIgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2FsZXMgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgY292ZXIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTUyCiAgICAvLyBpZiBtYXliZV9iZXN0X2JpZDoKICAgIGJ5dGVjXzIgLy8gMHgwMDAwCiAgICAhPQogICAgYnogYmlkX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNTQKICAgIC8vIG1heWJlX2Jlc3RfYmlkWzBdLmFtb3VudC5uYXRpdmUgPCBuZXdfYmlkX2Ftb3VudC5uYXRpdmUKICAgIGZyYW1lX2RpZyA3CiAgICBleHRyYWN0IDIgNDAKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIDwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE1My0xNTUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgbWF5YmVfYmVzdF9iaWRbMF0uYW1vdW50Lm5hdGl2ZSA8IG5ld19iaWRfYW1vdW50Lm5hdGl2ZQogICAgLy8gKSwgZXJyLldPUlNFX0JJRAogICAgYXNzZXJ0IC8vIFdvcnNlIGJpZAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTU3CiAgICAvLyBzZWxmLnNhbGVzW3NhbGVfa2V5XS5iaWRbMF0gPSBuZXdfYmlkLmNvcHkoKQogICAgc3dhcAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zYWxlcyBlbnRyeSBleGlzdHMKICAgIGR1cAogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIGxlbgogICAgZGlnIDIKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBhc3NlcnQgLy8gSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHVuY292ZXIgNAogICAgcmVwbGFjZTIgMgogICAgdW5jb3ZlciAyCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAzCiAgICBleHRyYWN0MwogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgYm94X2RlbAogICAgcG9wCiAgICBib3hfcHV0CgpiaWRfYWZ0ZXJfaWZfZWxzZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTYxCiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSAtPSBuZXdfYmlkX2Ftb3VudC5uYXRpdmUKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlcG9zaXRlZCBleGlzdHMgZm9yIGFjY291bnQKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLQogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTYzCiAgICAvLyBuZXdfcGxhY2VkX2JpZCA9IFBsYWNlZEJpZChzYWxlX2tleS5jb3B5KCksIG5ld19iaWRfYW1vdW50KQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNjQKICAgIC8vIGlmIHNlbGYucGxhY2VkX2JpZHMubWF5YmUoYXJjNF9zZW5kZXIpWzFdOgogICAgYnl0ZWNfMyAvLyAicGxhY2VkX2JpZHMiCiAgICBmcmFtZV9kaWcgNgogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgYm94X2dldAogICAgYnVyeSAxCiAgICBieiBiaWRfZWxzZV9ib2R5QDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE2NgogICAgLy8gc2VsZi5wbGFjZWRfYmlkc1thcmM0X3NlbmRlcl0uY29weSgpLCBzYWxlX2tleS5jb3B5KCkKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMQogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxhY2VkX2JpZHMgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weTo0NQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHBsYWNlZF9iaWRzLmxlbmd0aCk6CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2J1cnkgNQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMwoKYmlkX2Zvcl9oZWFkZXJAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weTo0NQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHBsYWNlZF9iaWRzLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDUKICAgIDwKICAgIGJ6IGJpZF9hZnRlcl9mb3JAMTcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjQ2CiAgICAvLyBpZiBwbGFjZWRfYmlkc1tpXS5zYWxlX2tleSA9PSBrZXk6CiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzIgLy8gNDgKICAgICoKICAgIGludGNfMiAvLyA0OAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBleHRyYWN0IDAgNDAgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTIKICAgID09CiAgICBieiBiaWRfYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6NDcKICAgIC8vIHJldHVybiBUcnVlLCBpCiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgNAoKYmlkX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLmRpZ2l0YWxfbWFya2V0cGxhY2Uuc3Vicm91dGluZXMuZmluZF9wbGFjZWRfYmlkQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY4CiAgICAvLyBpZiBmb3VuZDoKICAgIGJ6IGJpZF9lbHNlX2JvZHlANgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY5CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSArPSBzZWxmLnBsYWNlZF9iaWRzW2FyYzRfc2VuZGVyXVsKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlcG9zaXRlZCBleGlzdHMgZm9yIGFjY291bnQKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBsYWNlZF9iaWRzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY5LTE3MQogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gKz0gc2VsZi5wbGFjZWRfYmlkc1thcmM0X3NlbmRlcl1bCiAgICAvLyAgICAgaW5kZXgKICAgIC8vIF0uYmlkX2Ftb3VudC5uYXRpdmUKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjb3ZlciA0CiAgICBpbnRjXzIgLy8gNDgKICAgICoKICAgIHN3YXAKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gNDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcHVzaGludCA0MCAvLyA0MAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgMgogICAgKwogICAgdW5jb3ZlciA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNjkKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdICs9IHNlbGYucGxhY2VkX2JpZHNbYXJjNF9zZW5kZXJdWwogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY5LTE3MQogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gKz0gc2VsZi5wbGFjZWRfYmlkc1thcmM0X3NlbmRlcl1bCiAgICAvLyAgICAgaW5kZXgKICAgIC8vIF0uYmlkX2Ftb3VudC5uYXRpdmUKICAgIHVuY292ZXIgMgogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTcyCiAgICAvLyBzZWxmLnBsYWNlZF9iaWRzW2FyYzRfc2VuZGVyXVtpbmRleF0gPSBuZXdfcGxhY2VkX2JpZC5jb3B5KCkKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wbGFjZWRfYmlkcyBlbnRyeSBleGlzdHMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICB1bmNvdmVyIDQKICAgID4KICAgIGFzc2VydCAvLyBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGZyYW1lX2RpZyAwCiAgICByZXBsYWNlMwogICAgZGlnIDEKICAgIGJveF9kZWwKICAgIHBvcAogICAgYm94X3B1dAogICAgcmV0c3ViCgpiaWRfZWxzZV9ib2R5QDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNzQKICAgIC8vIHNlbGYucGxhY2VkX2JpZHNbYXJjNF9zZW5kZXJdLmFwcGVuZChuZXdfcGxhY2VkX2JpZC5jb3B5KCkpCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wbGFjZWRfYmlkcyBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDQ4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMQogICAgYm94X2RlbAogICAgcG9wCiAgICBib3hfcHV0CiAgICByZXRzdWIKCmJpZF9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6NDUKICAgIC8vIGZvciBpIGluIHVyYW5nZShwbGFjZWRfYmlkcy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgYmlkX2Zvcl9oZWFkZXJAMTMKCmJpZF9hZnRlcl9mb3JAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9zdWJyb3V0aW5lcy5weTo0OAogICAgLy8gcmV0dXJuIEZhbHNlLCBVSW50NjQoMCkKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTY1LTE2NwogICAgLy8gZm91bmQsIGluZGV4ID0gZmluZF9wbGFjZWRfYmlkKAogICAgLy8gICAgIHNlbGYucGxhY2VkX2JpZHNbYXJjNF9zZW5kZXJdLmNvcHkoKSwgc2FsZV9rZXkuY29weSgpCiAgICAvLyApCiAgICBiIGJpZF9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLnN1YnJvdXRpbmVzLmZpbmRfcGxhY2VkX2JpZEAxOAoKYmlkX2Vsc2VfYm9keUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTc2CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSAtPSBwbGFjZWRfYmlkc19ib3hfbWJyKCkKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlcG9zaXRlZCBleGlzdHMgZm9yIGFjY291bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL3N1YnJvdXRpbmVzLnB5OjMwLTM4CiAgICAvLyByZXR1cm4gVUludDY0KAogICAgLy8gICAgIDJfNTAwCiAgICAvLyAgICAgKyA0MDAKICAgIC8vICAgICAqICgKICAgIC8vICAgICAgICAgIyBhc3N1bWluZyBpdCdzIHBvc3NpYmxlIHRvIGZpbGwgYW4gZW50aXJlIGJveAogICAgLy8gICAgICAgICA2NAogICAgLy8gICAgICAgICArIDMyNzY4CiAgICAvLyAgICAgKQogICAgLy8gKQogICAgaW50YyA0IC8vIDEzMTM1MzAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxNzYKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdIC09IHBsYWNlZF9iaWRzX2JveF9tYnIoKQogICAgLQogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTc3LTE3OQogICAgLy8gc2VsZi5wbGFjZWRfYmlkc1thcmM0X3NlbmRlcl0gPSBhcmM0LkR5bmFtaWNBcnJheVtQbGFjZWRCaWRdKAogICAgLy8gICAgIG5ld19wbGFjZWRfYmlkLmNvcHkoKQogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MDAwMQogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICByZXRzdWIKCmJpZF9lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE1OQogICAgLy8gc2VsZi5zYWxlc1tzYWxlX2tleV0uYmlkLmFwcGVuZChuZXdfYmlkLmNvcHkoKSkKICAgIHN3YXAKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2FsZXMgZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIGRpZyAyCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDMKICAgIGV4dHJhY3QzCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIGIgYmlkX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLmNvbnRyYWN0LkRpZ2l0YWxNYXJrZXRwbGFjZS5jbGFpbV91bmVuY3VtYmVyZWRfYmlkcygpIC0+IHZvaWQ6CmNsYWltX3VuZW5jdW1iZXJlZF9iaWRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTgxLTE4MgogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCIsICJPcHRJbiJdKQogICAgLy8gZGVmIGNsYWltX3VuZW5jdW1iZXJlZF9iaWRzKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE4MwogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gPSBzZWxmLmRlcG9zaXRlZC5nZXQoVHhuLnNlbmRlciwgVUludDY0KDApKQogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGludGNfMCAvLyAwCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIHR4biBTZW5kZXIKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIHVuY292ZXIgMgogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTg1CiAgICAvLyBwbGFjZWRfYmlkcyA9IHNlbGYucGxhY2VkX2JpZHNbYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpXS5jb3B5KCkKICAgIGJ5dGVjXzMgLy8gInBsYWNlZF9iaWRzIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxhY2VkX2JpZHMgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODYKICAgIC8vIGVuY3VtYmVyZWRfcGxhY2VkX2JpZHMgPSBhcmM0LkR5bmFtaWNBcnJheVtQbGFjZWRCaWRdKCkKICAgIGJ5dGVjXzIgLy8gMHgwMDAwCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODgKICAgIC8vIGZvciBpIGluIHVyYW5nZShwbGFjZWRfYmlkcy5sZW5ndGgpOgogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMAoKY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHNfZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTg4CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UocGxhY2VkX2JpZHMubGVuZ3RoKToKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgNAogICAgPAogICAgYnogY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHNfYWZ0ZXJfZm9yQDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5MAogICAgLy8gbm90IHNlbGYuc2FsZXMubWF5YmUocGxhY2VkX2JpZHNbaV0uc2FsZV9rZXkpWzFdCiAgICBmcmFtZV9kaWcgMgogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gNDgKICAgICoKICAgIGludGNfMiAvLyA0OAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgZXh0cmFjdCAwIDQwIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZWNfMSAvLyAic2FsZXMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICBib3hfZ2V0CiAgICBidXJ5IDEKICAgIGJ6IGNsYWltX3VuZW5jdW1iZXJlZF9iaWRzX2lmX2JvZHlANQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTkxCiAgICAvLyBvciBub3Qgc2VsZi5zYWxlcy5tYXliZShwbGFjZWRfYmlkc1tpXS5zYWxlX2tleSlbMF0uYmlkCiAgICBmcmFtZV9kaWcgMQogICAgYm94X2dldAogICAgcG9wCiAgICBkdXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIHN1YnN0cmluZzMKICAgIGJ5dGVjXzIgLy8gMHgwMDAwCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTkwLTE5MwogICAgLy8gbm90IHNlbGYuc2FsZXMubWF5YmUocGxhY2VkX2JpZHNbaV0uc2FsZV9rZXkpWzFdCiAgICAvLyBvciBub3Qgc2VsZi5zYWxlcy5tYXliZShwbGFjZWRfYmlkc1tpXS5zYWxlX2tleSlbMF0uYmlkCiAgICAvLyBvciBub3Qgc2VsZi5zYWxlcy5tYXliZShwbGFjZWRfYmlkc1tpXS5zYWxlX2tleSlbMF0uYmlkWzBdLmJpZGRlci5uYXRpdmUKICAgIC8vID09IFR4bi5zZW5kZXIKICAgIGJueiBjbGFpbV91bmVuY3VtYmVyZWRfYmlkc19pZl9ib2R5QDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5MgogICAgLy8gb3Igbm90IHNlbGYuc2FsZXMubWF5YmUocGxhY2VkX2JpZHNbaV0uc2FsZV9rZXkpWzBdLmJpZFswXS5iaWRkZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgMQogICAgYm94X2dldAogICAgcG9wCiAgICBkdXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiA0MAogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTkzCiAgICAvLyA9PSBUeG4uc2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTItMTkzCiAgICAvLyBvciBub3Qgc2VsZi5zYWxlcy5tYXliZShwbGFjZWRfYmlkc1tpXS5zYWxlX2tleSlbMF0uYmlkWzBdLmJpZGRlci5uYXRpdmUKICAgIC8vID09IFR4bi5zZW5kZXIKICAgID09CiAgICBibnogY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHNfZWxzZV9ib2R5QDYKCmNsYWltX3VuZW5jdW1iZXJlZF9iaWRzX2lmX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5NgogICAgLy8gc2VsZi5kZXBvc2l0ZWQuZ2V0KFR4bi5zZW5kZXIsIFVJbnQ2NCgwKSkKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBpbnRjXzAgLy8gMAogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTcKICAgIC8vICsgcGxhY2VkX2JpZHNbaV0uYmlkX2Ftb3VudC5uYXRpdmUKICAgIGZyYW1lX2RpZyAwCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTk1CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9ICgKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE5Ni0xOTcKICAgIC8vIHNlbGYuZGVwb3NpdGVkLmdldChUeG4uc2VuZGVyLCBVSW50NjQoMCkpCiAgICAvLyArIHBsYWNlZF9iaWRzW2ldLmJpZF9hbW91bnQubmF0aXZlCiAgICBjb3ZlciAyCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxOTUKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MTk1LTE5OAogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gPSAoCiAgICAvLyAgICAgc2VsZi5kZXBvc2l0ZWQuZ2V0KFR4bi5zZW5kZXIsIFVJbnQ2NCgwKSkKICAgIC8vICAgICArIHBsYWNlZF9iaWRzW2ldLmJpZF9hbW91bnQubmF0aXZlCiAgICAvLyApCiAgICBzd2FwCiAgICBhcHBfbG9jYWxfcHV0CgpjbGFpbV91bmVuY3VtYmVyZWRfYmlkc19hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToxODgKICAgIC8vIGZvciBpIGluIHVyYW5nZShwbGFjZWRfYmlkcy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDUKICAgIGIgY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHNfZm9yX2hlYWRlckAxCgpjbGFpbV91bmVuY3VtYmVyZWRfYmlkc19lbHNlX2JvZHlANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwMAogICAgLy8gZW5jdW1iZXJlZF9wbGFjZWRfYmlkcy5hcHBlbmQocGxhY2VkX2JpZHNbaV0uY29weSgpKQogICAgZnJhbWVfZGlnIDMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDQ4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDMKICAgIGIgY2xhaW1fdW5lbmN1bWJlcmVkX2JpZHNfYWZ0ZXJfaWZfZWxzZUA3CgpjbGFpbV91bmVuY3VtYmVyZWRfYmlkc19hZnRlcl9mb3JAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwMgogICAgLy8gaWYgZW5jdW1iZXJlZF9wbGFjZWRfYmlkczoKICAgIGZyYW1lX2RpZyAzCiAgICBieXRlY18yIC8vIDB4MDAwMAogICAgIT0KICAgIGJ6IGNsYWltX3VuZW5jdW1iZXJlZF9iaWRzX2Vsc2VfYm9keUAxMQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjAzCiAgICAvLyBzZWxmLnBsYWNlZF9iaWRzW2FyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKV0gPSBlbmN1bWJlcmVkX3BsYWNlZF9iaWRzLmNvcHkoKQogICAgYnl0ZWNfMyAvLyAicGxhY2VkX2JpZHMiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBmcmFtZV9kaWcgMwogICAgYm94X3B1dAogICAgcmV0c3ViCgpjbGFpbV91bmVuY3VtYmVyZWRfYmlkc19lbHNlX2JvZHlAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMDUKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdICs9IHBsYWNlZF9iaWRzX2JveF9tYnIoKQogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZGVwb3NpdGVkIgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVwb3NpdGVkIGV4aXN0cyBmb3IgYWNjb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2Uvc3Vicm91dGluZXMucHk6MzAtMzgKICAgIC8vIHJldHVybiBVSW50NjQoCiAgICAvLyAgICAgMl81MDAKICAgIC8vICAgICArIDQwMAogICAgLy8gICAgICogKAogICAgLy8gICAgICAgICAjIGFzc3VtaW5nIGl0J3MgcG9zc2libGUgdG8gZmlsbCBhbiBlbnRpcmUgYm94CiAgICAvLyAgICAgICAgIDY0CiAgICAvLyAgICAgICAgICsgMzI3NjgKICAgIC8vICAgICApCiAgICAvLyApCiAgICBpbnRjIDQgLy8gMTMxMzUzMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gc2VsZi5kZXBvc2l0ZWRbVHhuLnNlbmRlcl0gKz0gcGxhY2VkX2JpZHNfYm94X21icigpCiAgICArCiAgICBieXRlY18wIC8vICJkZXBvc2l0ZWQiCiAgICBzd2FwCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMDYKICAgIC8vIGRlbCBzZWxmLnBsYWNlZF9iaWRzW2FyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKV0KICAgIGJ5dGVjXzMgLy8gInBsYWNlZF9iaWRzIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZGVsCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5kaWdpdGFsX21hcmtldHBsYWNlLmNvbnRyYWN0LkRpZ2l0YWxNYXJrZXRwbGFjZS5hY2NlcHRfYmlkKGFzc2V0OiBieXRlcykgLT4gdm9pZDoKYWNjZXB0X2JpZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIwOC0yMDkKICAgIC8vIEBhYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIk5vT3AiLCAiT3B0SW4iXSkKICAgIC8vIGRlZiBhY2NlcHRfYmlkKHNlbGYsIGFzc2V0OiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjEwCiAgICAvLyBzYWxlX2tleSA9IFNhbGVLZXkob3duZXI9YXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLCBhc3NldD1hc3NldCkKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMTEKICAgIC8vIHNhbGUgPSBzZWxmLnNhbGVzW3NhbGVfa2V5XS5jb3B5KCkKICAgIGJ5dGVjXzEgLy8gInNhbGVzIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNhbGVzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjEyCiAgICAvLyBjdXJyZW50X2Jlc3RfYmlkID0gc2FsZS5iaWRbMF0uY29weSgpCiAgICBkdXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICBsZW4KICAgIGRpZyAyCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgNDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNQogICAgLy8gc2VsZi5kZXBvc2l0ZWQuZ2V0KFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApKQogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGludGNfMCAvLyAwCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNgogICAgLy8gKyBjdXJyZW50X2Jlc3RfYmlkLmFtb3VudC5uYXRpdmUKICAgIGRpZyAxCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gc2VsZi5kZXBvc2l0ZWQuZ2V0KFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApKQogICAgLy8gKyBjdXJyZW50X2Jlc3RfYmlkLmFtb3VudC5uYXRpdmUKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNwogICAgLy8gKyBzYWxlc19ib3hfbWJyKHNlbGYuc2FsZXMua2V5X3ByZWZpeC5sZW5ndGgpCiAgICBwdXNoaW50IDUgLy8gNQogICAgY2FsbHN1YiBzYWxlc19ib3hfbWJyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMTQKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE1LTIxNwogICAgLy8gc2VsZi5kZXBvc2l0ZWQuZ2V0KFR4bi5zZW5kZXIsIGRlZmF1bHQ9VUludDY0KDApKQogICAgLy8gKyBjdXJyZW50X2Jlc3RfYmlkLmFtb3VudC5uYXRpdmUKICAgIC8vICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgY292ZXIgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE0CiAgICAvLyBzZWxmLmRlcG9zaXRlZFtUeG4uc2VuZGVyXSA9ICgKICAgIGJ5dGVjXzAgLy8gImRlcG9zaXRlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxNC0yMTgKICAgIC8vIHNlbGYuZGVwb3NpdGVkW1R4bi5zZW5kZXJdID0gKAogICAgLy8gICAgIHNlbGYuZGVwb3NpdGVkLmdldChUeG4uc2VuZGVyLCBkZWZhdWx0PVVJbnQ2NCgwKSkKICAgIC8vICAgICArIGN1cnJlbnRfYmVzdF9iaWQuYW1vdW50Lm5hdGl2ZQogICAgLy8gICAgICsgc2FsZXNfYm94X21icihzZWxmLnNhbGVzLmtleV9wcmVmaXgubGVuZ3RoKQogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE5LTIyMwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPWN1cnJlbnRfYmVzdF9iaWQuYmlkZGVyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9c2FsZS5hbW91bnQubmF0aXZlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjIwCiAgICAvLyB4ZmVyX2Fzc2V0PWFzc2V0Lm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjIxCiAgICAvLyBhc3NldF9yZWNlaXZlcj1jdXJyZW50X2Jlc3RfYmlkLmJpZGRlci5uYXRpdmUsCiAgICBzd2FwCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZGlnaXRhbF9tYXJrZXRwbGFjZS9jb250cmFjdC5weToyMjIKICAgIC8vIGFzc2V0X2Ftb3VudD1zYWxlLmFtb3VudC5uYXRpdmUsCiAgICB1bmNvdmVyIDIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2RpZ2l0YWxfbWFya2V0cGxhY2UvY29udHJhY3QucHk6MjE5LTIyMwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPWN1cnJlbnRfYmVzdF9iaWQuYmlkZGVyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9c2FsZS5hbW91bnQubmF0aXZlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIyNQogICAgLy8gZGVsIHNlbGYuc2FsZXNbc2FsZV9rZXldCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEwEMTboQYmBAlkZXBvc2l0ZWQFc2FsZXMCAAALcGxhY2VkX2JpZHMxG0EA+4IJBDYl5OsEIfHd/wQTAAqUBKaSAGYECVRIEATUmsYOBKGPH/wERW45dQT44O+vNhoAjgkAmwCIAHYAXABGADcAJQAVAAIiQyMxGZCBAxpEMRhENhoBiASHI0MjMRmQgQMaRDEYRIgDrCNDMRkURDEYRDYaATYaAogCLiNDMRkURDEYRDYaAYgBxyNDIzEZkIEDGkQxGEQ2GgEXwDCIAXIjQzEZFEQxGEQxFiMJSTgQgQQSRDYaAYgBDyNDMRkURDEYRDYaARfAMIgAxSNDIzEZkIEFGkQxGEQ2GgGIAHMjQyMxGZCBAxpEMRhEMRYjCUk4ECMSRIgAMCNDMRlA/0YxGBREI0OKAQGL/4EgCIEICIECCIEICIEICIECCIEoCIGQAwuBxBMIiYoBAIv/OAAxABJEi/84BzIKEkQxACIoYyJOAk2L/zgIMQBOAggoTGaJigEAMRlAACMxAEkiKGNEi/8XTEsBCU8CKE8CZrExALIHsggjshAisgGzibExAEkiKGNEsgiyByOyECKyAbOJigEAMgqL/3AARQEURIv/cQpEMgMSRDEASSIoY0QyEAkoTGaxMgoishKyFIv/shGBBLIQIrIBs4mKAgCL/jgAMQASRIv+OBQyChJEMQCL/jgRFlApTFBJvkUBFEQxAEkiKGNEgQWI/w0JKExmi/44EhaL/1CAAgASUCpQSwG8SL+JigEAMQCL/xZQsTEAKU8CUEm+RCJbshJMshSL/7IRgQSyECKyAbMxACIoYyJOAk2BBYj+wDEATgIIKExmvEiJigEAMQBJIihjRCmL/1BJvkSBCFtPAkwJTwIoTwJmi/9XACBJIihjREsCvkSBCFuBBYj+gQgIKExmsYv/gSBbMQBLAr5EIluyErIUshGBBLIQIrIBs7xIiYoCACJHAoAARwIxAEmL/1Api/5QSU4CvkRJJVlLARVSSU4DKhNBARKLB1cCKIEgW4v/FwxETEm+REklWUsBFUsCSwJPAlJJIllETwRcAk8CIk8DWExQSwG8SL8xAEkiKGNEi/8XCShMZov+i/9QjAAriwZQSYwCvkUBQQChiwK+TElOAowBRCJZjAUijAOLA4sFDEEAgYsBVwIAiwMkCyRYVwAoi/4SQQBkI4sDjARBAEExAEkiKGNEiwJJTgK+RFcCAIsESU4EJAtMSwEkWIEoW08CCE8EKE8CZksBvkRJIllPBA1ETIECCIsAXUsBvEi/iYsCSb5EVwIAiwBQSRUkChZXBgJMUEsBvEi/iYsDIwiMA0L/dyJJjARC/5ExAEkiKGNEIQQJKExmgAIAAYsAUIsCSbxITL+JTEm+REklWUsBFUsCSwJPAlJXAgBPBFBJFYEoChZXBgJMUE8CIk8DWExQSwG8SL9C/u+KAAAiSTEAIihjIk4CTTEAKE8CZisxAFC+TElPAkQqTCJZIosFiwQMQQB6iwJXAgCLBSQLJFhJjABXACgpTFBJjAG+RQFBACeLAb5ISSVZSwEVUioSQAAXiwG+SEklWUsBFVJXAihXACAxABJAAB8xACIoYyJOAk2LAIEoWzEATgIIKExmiwUjCIwFQv+ViwNXAgCLAFBJFSQKFlcGAkxQjANC/+CLAyoTQQALKzEAUEm8SIsDv4kxAEkiKGNEIQQIKExmKzEAULxIiYoBADEAi/9QKUxQSb5ESSVZSwEVSwJOAlJXAigxACIoYyJOAk1LAYEgWwiBBYj79jEATgIIKExmsYv/F0xXACBPAiJbshKyFLIRgQSyECKyAbO8SIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}], "name": "deposit", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}], "name": "withdraw", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "asset"}], "name": "sponsor_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "axfer", "name": "asset_deposit"}, {"type": "uint64", "name": "cost"}], "name": "open_sale", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "asset", "name": "asset"}], "name": "close_sale", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "sale_key", "struct": "SaleKey"}], "name": "buy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "sale_key", "struct": "SaleKey"}, {"type": "uint64", "name": "new_bid_amount"}], "name": "bid", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_unencumbered_bids", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_total_and_unencumbered_bids", "returns": {"type": "(uint64,uint64)", "struct": "UnencumberedBidsReceipt"}, "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset"}], "name": "accept_bid", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "DigitalMarketplace", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {"deposited": {"keyType": "address", "valueType": "uint64", "prefix": "ZGVwb3NpdGVk"}, "sales": {"keyType": "SaleKey", "valueType": "Sale", "prefix": "c2FsZXM="}, "receipt_book": {"keyType": "address", "valueType": "((address,uint64),uint64)[]", "prefix": "cmVjZWlwdF9ib29r"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"Bid": [{"name": "bidder", "type": "address"}, {"name": "amount", "type": "uint64"}], "Sale": [{"name": "amount", "type": "uint64"}, {"name": "cost", "type": "uint64"}, {"name": "bid", "type": "Bid"}], "SaleKey": [{"name": "owner", "type": "address"}, {"name": "asset", "type": "uint64"}], "UnencumberedBidsReceipt": [{"name": "total_bids", "type": "uint64"}, {"name": "unencumbered_bids", "type": "uint64"}]}, "byteCode": {"approval": "CiAEAAEwBCYFCWRlcG9zaXRlZAxyZWNlaXB0X2Jvb2sFc2FsZXMAAgAAMRtBAQeCCgQ2JeTrBCHx3f8EEwAKlASmkgBmBAlUSBAE1JrGDgShjx/8BEVuOXUEHqu7WAT44O+vNhoAjgoApACVAIMAagBYAEkANwArABEAAiJDMRkURDEYRDYaAYgE8iNDMRkURDEYRIgEeEwWTBZQgAQVH3x1TFCwI0MxGRREMRhEiAPFI0MxGRREMRhENhoBNhoCiAKGI0MxGRREMRhENhoBiAIOI0MxGRREMRhENhoBF8AwiAG5I0MxGRREMRhEMRYjCUk4ECUSRDYaAYgBKSNDMRkURDEYRDYaARfAMIgA3iNDMRkURDEYRDYaAYgApyNDMRkURDEYRDEWIwlJOBAjEkSIAEkjQzEZQP9BMRgURCNDigICi/4iWSKLAYsADEEAJYv+VwIAiwEkCyRYVwAoi/8SQQAII4sBTwNPA4mLASMIjAFC/9MiSU8DTwOJigEAi/84ADEAEkSL/zgHMgoSRDIKcwFEKDEAUL5MFyJMTwJNi/84CCgxAFBOAggWvzIKcwFETAkoMQBQSb5MF0xETwIJFr+JigEAKDEAUEm+TBdMRIv/F0xLAQkWTwJMv7ExALIHsggjshAisgGziYoBADIKi/9wAEUBFESL/3EKRDIDEkQoMQBQSb5MF0xEMhAJFr+xMgoishKyFIv/shElshAisgGziYoCAIv+OAAxABJEi/44FDIKEkQxAIv+OBEWUCpMUEm9RQEURDIKcwFEi/44EhaL/1CAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQTwJMvzIKcwFETAkoMQBQSb5MF0xETwIJFr+JigEAMQCL/xZQsTEAKk8CUEm+RCJbshJMshSL/7IRJbIQIrIBszIKcwFETLxIMgpzAUQJKDEAUEm+TBdMRE8CCBa/iYoBADEAi/9XACBMSwETRCqL/1BJvkSxi/+BIFsxAEsCIluyErIUshElshAisgGzMgpzAURPArxIMgpzAUQJKDEAUEm+TBdMRE8DgQhbTEsBCRZPAky/KE8DUEm+TBdMRE8CTwMICBa/iYoCACJJK0kxAIv/UIv+VwAgMQATRCqL/lBJvkxJTwJEVxAoSVcAIDIDE0EACosHgSBbi/8XDESLBklXAAhMVwgIUIsEUIsFTL8yCnMBTIwDRIv+i/9QjAApMQBQvkyMAUEAhosBi/6I/Y6MAkEAXCgxAFBJvkwXTESLAUlOAlcCAIsCSU4EJAtMSwEkWIEoW08CCBZPBEy/SwEiWU8DDUSBAgiLAF0pMQBQSbxITL8yCnMBRIsDCSgxAFBJvkwXTESL/xdPAwgJFr+JiwFXAgCLAFBJFSQKFlcGAkxQKTEAUEm8SEy/Qv/GgAIAAYsAUCkxAFBJvEhMv0L/s4oBASKL/1cAKCpMUL5BAB2LAVcQKFcAIEmMADIDE0EADIsAMQASQQAEI4wAiSJC//mKAAArJwQpMQBQvkxJTwJEIlkiiwSLAwxBAEOLAlcCAIsEJAskWEmI/6VBAByLAVcCAExQSRUkChZXBgJMUIwBiwQjCIwEQv/KKDEAUEm+TBdMRE8CgShbCBa/Qv/iMgpzAUyMAESLASJZQQAjKTEAUEm8SIsBvzIKcwFEiwBMCSgxAFBJvkwXTERPAggWv4kpMQBQvEhC/96KAAIrRwIiRwMpMQBQvkxOA0xOAkEATosFIlmMACKMAYsBiwAMQQA1iwVXAgCLASQLJFhJgShbSYwCiwMIjAOI/vSLBIwGQAAHiwSLAgiMBosGjASLASMIjAFC/8OLBIwGiwOMB4sHiwaMAYwAiYoBACJJKzEAi/9QKksBUEm+RElXEChJVwAgSU4ETgUyCnMBRE8DvEgyCnMBRAkoMQBQSb5MF0xETwOBIFtPAwgIFr+xi/8XTCJbshJLAbIUshElshAisgGzKUxQSU4CvkxJTgJOA0RJTwKI+1dOAkQnBEwiWSKLCYsIDEEAQosFVwIAiwkkC0sBTCRYSU4CjAGLBiQLJFgTiweMAEEAFIsHVwIAiwFQSRUkChZXBgJMUIwAiwCMB4sJIwiMCUL/tjIKcwFMjAJEiwciWUEAIYsESbxIiwe/MgpzAUSLAkwJKIsDUEm+TBdMRE8CCBa/iYsEvEhC/+A=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 7, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [505], "errorMessage": "Already opted in"}, {"pc": [514], "errorMessage": "Clawback ASA"}, {"pc": [391, 560], "errorMessage": "Different sender"}, {"pc": [347, 348, 743, 855, 873, 877, 899, 903, 981, 1000, 1099, 1111, 1114, 1179, 1345, 1424, 1428, 1544, 1555], "errorMessage": "Index access is out of bounds"}, {"pc": [129, 144, 170, 182, 200, 215, 233, 258, 276, 291], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [585], "errorMessage": "Sale already exists"}, {"pc": [861], "errorMessage": "Seller cannot be bidder"}, {"pc": [750], "errorMessage": "Seller cannot be buyer"}, {"pc": [895], "errorMessage": "Worse bid"}, {"pc": [399, 568], "errorMessage": "Wrong receiver"}, {"pc": [404, 434, 590, 650, 710, 718, 787, 796, 921, 1020, 1243, 1265, 1440, 1449, 1604, 1624], "errorMessage": "account funded"}, {"pc": [510], "errorMessage": "asset exists"}, {"pc": [318], "errorMessage": "can only call when creating"}, {"pc": [132, 147, 173, 185, 203, 218, 236, 261, 279, 294], "errorMessage": "can only call when not creating"}, {"pc": [446, 465, 524, 662, 729, 807, 831, 961, 1033, 1224, 1279, 1460, 1638], "errorMessage": "check self.deposited entry exists"}, {"pc": [1157, 1507], "errorMessage": "check self.receipt_book entry exists"}, {"pc": [687, 757, 872, 1422], "errorMessage": "check self.sales entry exists"}, {"pc": [246], "errorMessage": "transaction type is axfer"}, {"pc": [304], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class Bid:
    """Struct for Bid"""
    bidder: str
    amount: int

@dataclasses.dataclass(frozen=True)
class Sale:
    """Struct for Sale"""
    amount: int
    cost: int
    bid: Bid

@dataclasses.dataclass(frozen=True)
class SaleKey:
    """Struct for SaleKey"""
    owner: str
    asset: int

@dataclasses.dataclass(frozen=True)
class UnencumberedBidsReceipt:
    """Struct for UnencumberedBidsReceipt"""
    total_bids: int
    unencumbered_bids: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class DepositArgs:
    """Dataclass for deposit arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "deposit(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class WithdrawArgs:
    """Dataclass for withdraw arguments"""
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "withdraw(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SponsorAssetArgs:
    """Dataclass for sponsor_asset arguments"""
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "sponsor_asset(asset)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OpenSaleArgs:
    """Dataclass for open_sale arguments"""
    asset_deposit: algokit_utils.AppMethodCallTransactionArgument
    cost: int

    @property
    def abi_method_signature(self) -> str:
        return "open_sale(axfer,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CloseSaleArgs:
    """Dataclass for close_sale arguments"""
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "close_sale(asset)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyArgs:
    """Dataclass for buy arguments"""
    sale_key: SaleKey

    @property
    def abi_method_signature(self) -> str:
        return "buy((address,uint64))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BidArgs:
    """Dataclass for bid arguments"""
    sale_key: SaleKey
    new_bid_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "bid((address,uint64),uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AcceptBidArgs:
    """Dataclass for accept_bid arguments"""
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "accept_bid(uint64)void"


class DigitalMarketplaceParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def deposit(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit(pay)void",
            "args": method_args,
        }))

    def withdraw(
        self,
        args: tuple[int] | WithdrawArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw(uint64)void",
            "args": method_args,
        }))

    def sponsor_asset(
        self,
        args: tuple[int] | SponsorAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sponsor_asset(asset)void",
            "args": method_args,
        }))

    def open_sale(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | OpenSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_sale(axfer,uint64)void",
            "args": method_args,
        }))

    def close_sale(
        self,
        args: tuple[int] | CloseSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_sale(asset)void",
            "args": method_args,
        }))

    def buy(
        self,
        args: tuple[SaleKey] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy((address,uint64))void",
            "args": method_args,
        }))

    def bid(
        self,
        args: tuple[SaleKey, int] | BidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bid((address,uint64),uint64)void",
            "args": method_args,
        }))

    def claim_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_unencumbered_bids()void",
        }))

    def get_total_and_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_and_unencumbered_bids()(uint64,uint64)",
        }))

    def accept_bid(
        self,
        args: tuple[int] | AcceptBidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accept_bid(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class DigitalMarketplaceCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def deposit(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit(pay)void",
            "args": method_args,
        }))

    def withdraw(
        self,
        args: tuple[int] | WithdrawArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw(uint64)void",
            "args": method_args,
        }))

    def sponsor_asset(
        self,
        args: tuple[int] | SponsorAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sponsor_asset(asset)void",
            "args": method_args,
        }))

    def open_sale(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | OpenSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_sale(axfer,uint64)void",
            "args": method_args,
        }))

    def close_sale(
        self,
        args: tuple[int] | CloseSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_sale(asset)void",
            "args": method_args,
        }))

    def buy(
        self,
        args: tuple[SaleKey] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy((address,uint64))void",
            "args": method_args,
        }))

    def bid(
        self,
        args: tuple[SaleKey, int] | BidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bid((address,uint64),uint64)void",
            "args": method_args,
        }))

    def claim_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_unencumbered_bids()void",
        }))

    def get_total_and_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_and_unencumbered_bids()(uint64,uint64)",
        }))

    def accept_bid(
        self,
        args: tuple[int] | AcceptBidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accept_bid(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class DigitalMarketplaceSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def deposit(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def withdraw(
        self,
        args: tuple[int] | WithdrawArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def sponsor_asset(
        self,
        args: tuple[int] | SponsorAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sponsor_asset(asset)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def open_sale(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | OpenSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_sale(axfer,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def close_sale(
        self,
        args: tuple[int] | CloseSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_sale(asset)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def buy(
        self,
        args: tuple[SaleKey] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy((address,uint64))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def bid(
        self,
        args: tuple[SaleKey, int] | BidArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bid((address,uint64),uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_unencumbered_bids()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_total_and_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[UnencumberedBidsReceipt]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_and_unencumbered_bids()(uint64,uint64)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(UnencumberedBidsReceipt, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[UnencumberedBidsReceipt], parsed_response)

    def accept_bid(
        self,
        args: tuple[int] | AcceptBidArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "accept_bid(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class DigitalMarketplaceState:
    """Methods to access state for the current DigitalMarketplace app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "Sale": Sale
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def deposited(self) -> "_MapState[str, int]":
        """Get values from the deposited map in box state"""
        return _MapState(
            self.app_client.state.box,
            "deposited",
            None
        )

    @property
    def sales(self) -> "_MapState[SaleKey, Sale]":
        """Get values from the sales map in box state"""
        return _MapState(
            self.app_client.state.box,
            "sales",
            self._struct_classes.get("Sale")
        )

    @property
    def receipt_book(self) -> "_MapState[str, list[tuple[tuple[str, int], int]]]":
        """Get values from the receipt_book map in box state"""
        return _MapState(
            self.app_client.state.box,
            "receipt_book",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class DigitalMarketplaceClient:
    """Client for interacting with DigitalMarketplace smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = DigitalMarketplaceParams(self.app_client)
        self.create_transaction = DigitalMarketplaceCreateTransactionParams(self.app_client)
        self.send = DigitalMarketplaceSend(self.app_client)
        self.state = DigitalMarketplaceState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "DigitalMarketplaceClient":
        return DigitalMarketplaceClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "DigitalMarketplaceComposer":
        return DigitalMarketplaceComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["deposit(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["withdraw(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["sponsor_asset(asset)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["open_sale(axfer,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_sale(asset)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy((address,uint64))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bid((address,uint64),uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_unencumbered_bids()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_total_and_unencumbered_bids()(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> UnencumberedBidsReceipt | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["accept_bid(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | UnencumberedBidsReceipt:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class DigitalMarketplaceBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating DigitalMarketplace contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class DigitalMarketplaceFactory(algokit_utils.TypedAppFactoryProtocol[DigitalMarketplaceBareCallCreateParams, None, None]):
    """Factory for deploying and managing DigitalMarketplaceClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = DigitalMarketplaceFactoryParams(self.app_factory)
        self.create_transaction = DigitalMarketplaceFactoryCreateTransaction(self.app_factory)
        self.send = DigitalMarketplaceFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: DigitalMarketplaceBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[DigitalMarketplaceClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return DigitalMarketplaceClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> DigitalMarketplaceClient:
        """Get an app client by creator address and name"""
        return DigitalMarketplaceClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> DigitalMarketplaceClient:
        """Get an app client by app ID"""
        return DigitalMarketplaceClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class DigitalMarketplaceFactoryParams:
    """Parameters for creating transactions for DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactoryCreateParams(app_factory)
        self.update = DigitalMarketplaceFactoryUpdateParams(app_factory)
        self.delete = DigitalMarketplaceFactoryDeleteParams(app_factory)

class DigitalMarketplaceFactoryCreateParams:
    """Parameters for 'create' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def deposit(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the deposit(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "deposit(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def withdraw(
        self,
        args: tuple[int] | WithdrawArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the withdraw(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "withdraw(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def sponsor_asset(
        self,
        args: tuple[int] | SponsorAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the sponsor_asset(asset)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "sponsor_asset(asset)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def open_sale(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | OpenSaleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the open_sale(axfer,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "open_sale(axfer,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close_sale(
        self,
        args: tuple[int] | CloseSaleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_sale(asset)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_sale(asset)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buy(
        self,
        args: tuple[SaleKey] | BuyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy((address,uint64))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy((address,uint64))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bid(
        self,
        args: tuple[SaleKey, int] | BidArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bid((address,uint64),uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bid((address,uint64),uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_unencumbered_bids(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_unencumbered_bids()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_unencumbered_bids()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_total_and_unencumbered_bids(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_total_and_unencumbered_bids()(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_total_and_unencumbered_bids()(uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def accept_bid(
        self,
        args: tuple[int] | AcceptBidArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the accept_bid(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "accept_bid(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class DigitalMarketplaceFactoryUpdateParams:
    """Parameters for 'update' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class DigitalMarketplaceFactoryDeleteParams:
    """Parameters for 'delete' operations of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class DigitalMarketplaceFactoryCreateTransaction:
    """Create transactions for DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactoryCreateTransactionCreate(app_factory)


class DigitalMarketplaceFactoryCreateTransactionCreate:
    """Create new instances of DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class DigitalMarketplaceFactorySend:
    """Send calls to DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = DigitalMarketplaceFactorySendCreate(app_factory)


class DigitalMarketplaceFactorySendCreate:
    """Send create calls to DigitalMarketplace contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[DigitalMarketplaceClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return DigitalMarketplaceClient(result[0]), result[1]


class DigitalMarketplaceComposer:
    """Composer for creating transaction groups for DigitalMarketplace contract calls"""

    def __init__(self, client: "DigitalMarketplaceClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def deposit(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.deposit(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "deposit(pay)void", v
            )
        )
        return self

    def withdraw(
        self,
        args: tuple[int] | WithdrawArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.withdraw(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "withdraw(uint64)void", v
            )
        )
        return self

    def sponsor_asset(
        self,
        args: tuple[int] | SponsorAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.sponsor_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "sponsor_asset(asset)void", v
            )
        )
        return self

    def open_sale(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int] | OpenSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.open_sale(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "open_sale(axfer,uint64)void", v
            )
        )
        return self

    def close_sale(
        self,
        args: tuple[int] | CloseSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close_sale(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close_sale(asset)void", v
            )
        )
        return self

    def buy(
        self,
        args: tuple[SaleKey] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy((address,uint64))void", v
            )
        )
        return self

    def bid(
        self,
        args: tuple[SaleKey, int] | BidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bid(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bid((address,uint64),uint64)void", v
            )
        )
        return self

    def claim_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_unencumbered_bids(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_unencumbered_bids()void", v
            )
        )
        return self

    def get_total_and_unencumbered_bids(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_total_and_unencumbered_bids(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_total_and_unencumbered_bids()(uint64,uint64)", v
            )
        )
        return self

    def accept_bid(
        self,
        args: tuple[int] | AcceptBidArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.accept_bid(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "accept_bid(uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "DigitalMarketplaceComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "DigitalMarketplaceComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
